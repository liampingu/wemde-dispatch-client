# coding: utf-8

"""
    WEMDE Dispatch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from wemde_dispatch_client.models.market import Market

class TestMarket(unittest.TestCase):
    """Market unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Market:
        """Test Market
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Market`
        """
        model = Market()
        if include_optional:
            return Market(
                energy = wemde_dispatch_client.models.energy.Energy(
                    market_service = '', 
                    base_forecast_requirement = 1.337, 
                    override_forecast_requirement = 1.337, 
                    facilities = [
                        wemde_dispatch_client.models.energy_facility.EnergyFacility(
                            dsp_unconstrained_withdrawal_quantity = 1.337, 
                            dsp_constrained_withdrawal_quantity = 1.337, 
                            facility_code = '', 
                            submission_id = '', 
                            submission_code = '', 
                            max_injection_capacity = 1.337, 
                            max_withdrawal_capacity = 1.337, 
                            unconstrained_injection_forecast = 1.337, 
                            unconstrained_withdrawal_forecast = 1.337, 
                            inflexible_flag = True, 
                            max_upward_ramp_rate = 1.337, 
                            downwards_ramp_rate_value_used = 1.337, 
                            max_downward_ramp_rate = 1.337, 
                            upwards_ramp_rate_value_used = 1.337, 
                            fsip = wemde_dispatch_client.models.fsip.Fsip(
                                t1 = 1.337, 
                                t2 = 1.337, 
                                t3 = 1.337, 
                                t4 = 1.337, 
                                minimum_load = 1.337, ), 
                            tranches = [
                                wemde_dispatch_client.models.tranch.Tranch(
                                    tranche = 56, 
                                    fuel_type = '', 
                                    quantity = 1.337, 
                                    submitted_price = 1.337, 
                                    lfa_price = 1.337, 
                                    capacity_type = '', 
                                    notice_time = 56, )
                                ], )
                        ], ),
                regulation_raise = wemde_dispatch_client.models.regulation_raise.RegulationRaise(
                    market_service = '', 
                    base_forecast_requirement = 1.337, 
                    override_forecast_requirement = 1.337, 
                    facilities = [
                        wemde_dispatch_client.models.facility.Facility(
                            dsp_unconstrained_withdrawal_quantity = 1.337, 
                            dsp_constrained_withdrawal_quantity = 1.337, 
                            facility_code = '', 
                            submission_id = '', 
                            submission_code = '', 
                            tranches = [
                                wemde_dispatch_client.models.tranch.Tranch(
                                    tranche = 56, 
                                    fuel_type = '', 
                                    quantity = 1.337, 
                                    submitted_price = 1.337, 
                                    lfa_price = 1.337, 
                                    capacity_type = '', 
                                    notice_time = 56, )
                                ], 
                            maximum_capacity = 1.337, 
                            enablement_minimum = 1.337, 
                            enablement_minimum_value_used = 1.337, 
                            low_breakpoint = 1.337, 
                            low_breakpoint_value_used = 1.337, 
                            high_breakpoint = 1.337, 
                            high_breakpoint_value_used = 1.337, 
                            enablement_maximum = 1.337, 
                            enablement_maximum_value_used = 1.337, )
                        ], ),
                regulation_lower = wemde_dispatch_client.models.regulation_lower.RegulationLower(
                    market_service = '', 
                    base_forecast_requirement = 1.337, 
                    override_forecast_requirement = 1.337, 
                    facilities = [
                        wemde_dispatch_client.models.facility.Facility(
                            dsp_unconstrained_withdrawal_quantity = 1.337, 
                            dsp_constrained_withdrawal_quantity = 1.337, 
                            facility_code = '', 
                            submission_id = '', 
                            submission_code = '', 
                            tranches = [
                                wemde_dispatch_client.models.tranch.Tranch(
                                    tranche = 56, 
                                    fuel_type = '', 
                                    quantity = 1.337, 
                                    submitted_price = 1.337, 
                                    lfa_price = 1.337, 
                                    capacity_type = '', 
                                    notice_time = 56, )
                                ], 
                            maximum_capacity = 1.337, 
                            enablement_minimum = 1.337, 
                            enablement_minimum_value_used = 1.337, 
                            low_breakpoint = 1.337, 
                            low_breakpoint_value_used = 1.337, 
                            high_breakpoint = 1.337, 
                            high_breakpoint_value_used = 1.337, 
                            enablement_maximum = 1.337, 
                            enablement_maximum_value_used = 1.337, )
                        ], ),
                contingency_raise = wemde_dispatch_client.models.contingency_raise.ContingencyRaise(
                    market_service = '', 
                    base_forecast_requirement = 1.337, 
                    override_forecast_requirement = 1.337, 
                    facilities = [
                        wemde_dispatch_client.models.facility.Facility(
                            dsp_unconstrained_withdrawal_quantity = 1.337, 
                            dsp_constrained_withdrawal_quantity = 1.337, 
                            facility_code = '', 
                            submission_id = '', 
                            submission_code = '', 
                            tranches = [
                                wemde_dispatch_client.models.tranch.Tranch(
                                    tranche = 56, 
                                    fuel_type = '', 
                                    quantity = 1.337, 
                                    submitted_price = 1.337, 
                                    lfa_price = 1.337, 
                                    capacity_type = '', 
                                    notice_time = 56, )
                                ], 
                            maximum_capacity = 1.337, 
                            enablement_minimum = 1.337, 
                            enablement_minimum_value_used = 1.337, 
                            low_breakpoint = 1.337, 
                            low_breakpoint_value_used = 1.337, 
                            high_breakpoint = 1.337, 
                            high_breakpoint_value_used = 1.337, 
                            enablement_maximum = 1.337, 
                            enablement_maximum_value_used = 1.337, )
                        ], ),
                contingency_lower = wemde_dispatch_client.models.contingency_lower.ContingencyLower(
                    market_service = '', 
                    base_forecast_requirement = 1.337, 
                    override_forecast_requirement = 1.337, 
                    facilities = [
                        wemde_dispatch_client.models.facility.Facility(
                            dsp_unconstrained_withdrawal_quantity = 1.337, 
                            dsp_constrained_withdrawal_quantity = 1.337, 
                            facility_code = '', 
                            submission_id = '', 
                            submission_code = '', 
                            tranches = [
                                wemde_dispatch_client.models.tranch.Tranch(
                                    tranche = 56, 
                                    fuel_type = '', 
                                    quantity = 1.337, 
                                    submitted_price = 1.337, 
                                    lfa_price = 1.337, 
                                    capacity_type = '', 
                                    notice_time = 56, )
                                ], 
                            maximum_capacity = 1.337, 
                            enablement_minimum = 1.337, 
                            enablement_minimum_value_used = 1.337, 
                            low_breakpoint = 1.337, 
                            low_breakpoint_value_used = 1.337, 
                            high_breakpoint = 1.337, 
                            high_breakpoint_value_used = 1.337, 
                            enablement_maximum = 1.337, 
                            enablement_maximum_value_used = 1.337, )
                        ], ),
                rocof = wemde_dispatch_client.models.rocof.Rocof(
                    market_service = '', 
                    base_forecast_requirement = 1.337, 
                    override_forecast_requirement = 1.337, 
                    facilities = [
                        wemde_dispatch_client.models.facility.Facility(
                            dsp_unconstrained_withdrawal_quantity = 1.337, 
                            dsp_constrained_withdrawal_quantity = 1.337, 
                            facility_code = '', 
                            submission_id = '', 
                            submission_code = '', 
                            tranches = [
                                wemde_dispatch_client.models.tranch.Tranch(
                                    tranche = 56, 
                                    fuel_type = '', 
                                    quantity = 1.337, 
                                    submitted_price = 1.337, 
                                    lfa_price = 1.337, 
                                    capacity_type = '', 
                                    notice_time = 56, )
                                ], 
                            maximum_capacity = 1.337, 
                            enablement_minimum = 1.337, 
                            enablement_minimum_value_used = 1.337, 
                            low_breakpoint = 1.337, 
                            low_breakpoint_value_used = 1.337, 
                            high_breakpoint = 1.337, 
                            high_breakpoint_value_used = 1.337, 
                            enablement_maximum = 1.337, 
                            enablement_maximum_value_used = 1.337, )
                        ], )
            )
        else:
            return Market(
        )
        """

    def testMarket(self):
        """Test Market"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
