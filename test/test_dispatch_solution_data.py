# coding: utf-8

"""
    WEMDE Dispatch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from wemde_dispatch_client.models.dispatch_solution_data import DispatchSolutionData

class TestDispatchSolutionData(unittest.TestCase):
    """DispatchSolutionData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DispatchSolutionData:
        """Test DispatchSolutionData
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DispatchSolutionData`
        """
        model = DispatchSolutionData()
        if include_optional:
            return DispatchSolutionData(
                primary_dispatch_interval = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                dispatch_data_issue_id = '',
                dispatch_scenario = '',
                solution_data = [
                    wemde_dispatch_client.models.solution_datum.SolutionDatum(
                        categories = '', 
                        dispatch_interval = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        schedule = [
                            wemde_dispatch_client.models.schedule.Schedule(
                                market_service = '', 
                                facility_schedule = [
                                    wemde_dispatch_client.models.facility_schedule.FacilitySchedule(
                                        facility_code = '', 
                                        quantity = 1.337, 
                                        ess_pre_processing_condition_flag = True, )
                                    ], )
                            ], 
                        dispatch_caps = [
                            wemde_dispatch_client.models.dispatch_caps.DispatchCaps(
                                facility_code = '', 
                                dispatch_cap = 1.337, )
                            ], 
                        trapezium_adjustments = [
                            wemde_dispatch_client.models.trapezium_adjustment.TrapeziumAdjustment(
                                market_service = '', 
                                trapezium_adjustment_details = [
                                    wemde_dispatch_client.models.trapezium_adjustment_detail.TrapeziumAdjustmentDetail(
                                        facility_code = '', 
                                        enablement_minimum_value_used = 1.337, 
                                        low_breakpoint_value_used = 1.337, 
                                        high_breakpoint_value_used = 1.337, 
                                        enablement_maximum_value_used = 1.337, 
                                        downwards_ramp_rate_value_used = 1.337, 
                                        upwards_ramp_rate_value_used = 1.337, )
                                    ], )
                            ], 
                        facility_schedule_details = [
                            wemde_dispatch_client.models.facility_schedule_detail.FacilityScheduleDetail(
                                facility_code = '', 
                                contingency_raise_pf = 1.337, 
                                contingency_lower_pf = 1.337, 
                                regulation_raise_pf = 1.337, 
                                regulation_lower_pf = 1.337, 
                                rocof_pf = 1.337, 
                                dispatch_binding_flag = True, 
                                contingency = 1.337, 
                                initial_mw = 1.337, 
                                fast_start_flag = True, 
                                fast_start_initial_mode_time = 56, 
                                fast_start_initial_mode = 56, 
                                what_if_initial_mw = 1.337, 
                                fast_start_target_mode = 56, 
                                fast_start_target_mode_time = 56, 
                                estimated_fcess_uplift_payment = 1.337, 
                                nol_demand = 1.337, 
                                congestion_rental = 1.337, 
                                facility_risk = 1.337, )
                            ], 
                        defined_contingency = [
                            wemde_dispatch_client.models.defined_contingency.DefinedContingency(
                                id = '', 
                                value_of_contingency = 1.337, )
                            ], 
                        constraints = [
                            wemde_dispatch_client.models.constraint.Constraint(
                                id = '', 
                                description = '', 
                                left_hand_side_value = 1.337, 
                                operator = '', 
                                constraint_type = '', 
                                right_hand_side_value = 1.337, 
                                default_rhs = 1.337, 
                                binding_constraint_flag = True, 
                                near_binding_constraint_flag = True, 
                                shadow_price = 1.337, 
                                is_intervention_event = True, 
                                slack_variables = [
                                    wemde_dispatch_client.models.slack_variable.SlackVariable(
                                        variable = '', 
                                        value = 1.337, )
                                    ], )
                            ], 
                        in_service_quantities = wemde_dispatch_client.models.in_service_quantities.InServiceQuantities(
                            energy_injection_capacity = 1.337, 
                            energy_withdrawal_capacity = 1.337, 
                            contingency_raise = 1.337, 
                            contingency_lower = 1.337, 
                            regulation_raise = 1.337, 
                            regulation_lower = 1.337, 
                            rocof = 1.337, ), 
                        available_quantities = wemde_dispatch_client.models.available_quantities.AvailableQuantities(
                            energy_injection_capacity = 1.337, 
                            energy_withdrawal_capacity = 1.337, 
                            contingency_raise = 1.337, 
                            contingency_lower = 1.337, 
                            regulation_raise = 1.337, 
                            regulation_lower = 1.337, 
                            rocof = 1.337, ), 
                        market_shortfalls = wemde_dispatch_client.models.market_shortfalls.MarketShortfalls(
                            energy_deficit = 1.337, 
                            regulation_raise_deficit = 1.337, 
                            regulation_lower_deficit = 1.337, 
                            contingency_raise_deficit = 1.337, 
                            contingency_lower_deficit = 1.337, 
                            rocof_deficit = 1.337, ), 
                        prices = wemde_dispatch_client.models.prices.Prices(
                            energy = 1.337, 
                            contingency_lower = 1.337, 
                            regulation_raise = 1.337, 
                            regulation_lower = 1.337, 
                            rocof = 1.337, 
                            contingency_raise = 1.337, ), 
                        dispatch_total = wemde_dispatch_client.models.dispatch_total.DispatchTotal(
                            energy_injection_capacity = 1.337, 
                            energy_withdrawal_capacity = 1.337, 
                            contingency_raise = 1.337, 
                            contingency_lower = 1.337, 
                            regulation_raise = 1.337, 
                            regulation_lower = 1.337, 
                            rocof = 1.337, ), 
                        rocof_control_requirements = wemde_dispatch_client.models.rocof_control_requirements.RocofControlRequirements(
                            minimum_rocof_control_requirement = 1.337, 
                            additional_rocof_control_requirement = 1.337, 
                            rocof_control_requirement = 1.337, ), 
                        contingency_solution = wemde_dispatch_client.models.contingency_solution.ContingencySolution(
                            solved_inertia = 1.337, 
                            solved_contingency = 1.337, 
                            contingency_raise_requirement = 1.337, 
                            contingency_raise_deficit = 1.337, 
                            demand_level = 1.337, 
                            cleared_contingency_raise = 1.337, 
                            largest_contingency = 1.337, 
                            contingency_raise_offset = 1.337, 
                            contingency_lower_offset = 1.337, ), 
                        price_setting = [
                            wemde_dispatch_client.models.price_setting.PriceSetting(
                                market_service = '', 
                                is_market_service_capped = True, 
                                contributions = [
                                    wemde_dispatch_client.models.price_setting_contribution.PriceSettingContribution(
                                        contributing_variable = '', 
                                        by_how_much = 1.337, 
                                        objective_coefficient = 1.337, )
                                    ], )
                            ], 
                        fcess_market_clearing_price_ceilings = [
                            wemde_dispatch_client.models.fcess_market_clearing_price_ceilings.FcessMarketClearingPriceCeilings(
                                fcess_market_service = '', 
                                price_ceiling = 1.337, )
                            ], 
                        market_service_requirements = wemde_dispatch_client.models.market_service_requirements.MarketServiceRequirements(
                            energy = 1.337, 
                            regulation_raise = 1.337, 
                            regulation_lower = 1.337, 
                            contingency_raise = 1.337, 
                            contingency_lower = 1.337, 
                            rocof = 1.337, ), )
                    ]
            )
        else:
            return DispatchSolutionData(
        )
        """

    def testDispatchSolutionData(self):
        """Test DispatchSolutionData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
