# coding: utf-8

"""
    WEMDE Dispatch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from wemde_dispatch_client.models.trading_day_reports import TradingDayReports

class TestTradingDayReports(unittest.TestCase):
    """TradingDayReports unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TradingDayReports:
        """Test TradingDayReports
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TradingDayReports`
        """
        model = TradingDayReports()
        if include_optional:
            return TradingDayReports(
                trading_day = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                dsp_reduction_instructions = [
                    wemde_dispatch_client.models.dsp_reduction_instruction.DspReductionInstruction(
                        trading_interval = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        requested_reductions = [
                            wemde_dispatch_client.models.requested_reduction.RequestedReduction(
                                facility_code = '', 
                                requested_reduction_value = 56, )
                            ], )
                    ],
                congestion_rental_calculations = [
                    wemde_dispatch_client.models.congestion_rental_calculation.CongestionRentalCalculation(
                        dispatch_interval = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        congestion_rentals = [
                            wemde_dispatch_client.models.congestion_rental.CongestionRental(
                                facility_code = '', 
                                congestion_rental_value = 1.337, )
                            ], )
                    ],
                facility_risk_calculations = [
                    wemde_dispatch_client.models.facility_risk_calculation.FacilityRiskCalculation(
                        dispatch_interval = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        facility_risks = [
                            wemde_dispatch_client.models.facility_risk.FacilityRisk(
                                facility_code = '', 
                                facility_risk_value = 1.337, )
                            ], )
                    ],
                network_risk_calculations = [
                    wemde_dispatch_client.models.network_risk_calculation.NetworkRiskCalculation(
                        dispatch_interval = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        network_risks = [
                            wemde_dispatch_client.models.network_risk.NetworkRisk(
                                network_contingency = '', 
                                network_risk_value = 1.337, 
                                associated_facility_codes = [
                                    ''
                                    ], )
                            ], )
                    ],
                energy_uplift_prices_and_uplift_payment_mispricing_triggers = [
                    wemde_dispatch_client.models.energy_uplift_prices_and_uplift_payment_mispricing_trigger.EnergyUpliftPricesAndUpliftPaymentMispricingTrigger(
                        dispatch_interval = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        facilities = [
                            wemde_dispatch_client.models.swagger_trading_day_report_facility.SwaggerTradingDayReportFacility(
                                facility_code = '', 
                                energy_uplift_price = 1.337, 
                                uplift_mispricing_trigger = 56, )
                            ], )
                    ]
            )
        else:
            return TradingDayReports(
        )
        """

    def testTradingDayReports(self):
        """Test TradingDayReports"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
