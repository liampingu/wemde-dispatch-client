# coding: utf-8

"""
    WEMDE Dispatch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from wemde_dispatch_client.models.tranch import Tranch
from typing import Optional, Set
from typing_extensions import Self

class Facility(BaseModel):
    """
    An array of Facilities with Real-Time Market Submissions for the relevant Market Service.
    """ # noqa: E501
    dsp_unconstrained_withdrawal_quantity: Union[StrictFloat, StrictInt] = Field(alias="dspUnconstrainedWithdrawalQuantity")
    dsp_constrained_withdrawal_quantity: Union[StrictFloat, StrictInt] = Field(alias="dspConstrainedWithdrawalQuantity")
    facility_code: StrictStr = Field(description="The Facility to which the Real-Time Market Submission applies to.", alias="facilityCode")
    submission_id: StrictStr = Field(description="The submission Id associated with the Real-Time Market Submission.", alias="submissionId")
    submission_code: Optional[StrictStr] = Field(default=None, alias="submissionCode")
    tranches: Optional[List[Tranch]] = Field(default=None, description="An array of tranches. The Price-Quantity pairs and other components submitted by a Market Participant for a Dispatch Interval. The tranche can be one up to 10 tranches.")
    maximum_capacity: Union[StrictFloat, StrictInt] = Field(description="Total quantity of the relevant ESS Market Service the Facility is able to deliver for the Dispatch Interval.", alias="maximumCapacity")
    enablement_minimum: Union[StrictFloat, StrictInt] = Field(description="Level of Injection or Withdrawal (in MW) below which no response is specified as being available.", alias="enablementMinimum")
    enablement_minimum_value_used: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="enablementMinimumValueUsed")
    low_breakpoint: Union[StrictFloat, StrictInt] = Field(description="The MW energy dispatch level below which the Facility cannot provide the maximum quantity of that ESS Market Service which it is capable of providing.", alias="lowBreakpoint")
    low_breakpoint_value_used: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="lowBreakpointValueUsed")
    high_breakpoint: Union[StrictFloat, StrictInt] = Field(description="The MW energy dispatch level above which the Facility cannot provide the maximum quantity of that ESS Market System Service which it is capable of providing.", alias="highBreakpoint")
    high_breakpoint_value_used: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="highBreakpointValueUsed")
    enablement_maximum: Union[StrictFloat, StrictInt] = Field(description="The level of Injection or Withdrawal (in MW) above which no response is specified as being available", alias="enablementMaximum")
    enablement_maximum_value_used: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="enablementMaximumValueUsed")
    __properties: ClassVar[List[str]] = ["dspUnconstrainedWithdrawalQuantity", "dspConstrainedWithdrawalQuantity", "facilityCode", "submissionId", "submissionCode", "tranches", "maximumCapacity", "enablementMinimum", "enablementMinimumValueUsed", "lowBreakpoint", "lowBreakpointValueUsed", "highBreakpoint", "highBreakpointValueUsed", "enablementMaximum", "enablementMaximumValueUsed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Facility from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tranches (list)
        _items = []
        if self.tranches:
            for _item in self.tranches:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tranches'] = _items
        # set to None if submission_code (nullable) is None
        # and model_fields_set contains the field
        if self.submission_code is None and "submission_code" in self.model_fields_set:
            _dict['submissionCode'] = None

        # set to None if tranches (nullable) is None
        # and model_fields_set contains the field
        if self.tranches is None and "tranches" in self.model_fields_set:
            _dict['tranches'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Facility from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dspUnconstrainedWithdrawalQuantity": obj.get("dspUnconstrainedWithdrawalQuantity"),
            "dspConstrainedWithdrawalQuantity": obj.get("dspConstrainedWithdrawalQuantity"),
            "facilityCode": obj.get("facilityCode"),
            "submissionId": obj.get("submissionId"),
            "submissionCode": obj.get("submissionCode"),
            "tranches": [Tranch.from_dict(_item) for _item in obj["tranches"]] if obj.get("tranches") is not None else None,
            "maximumCapacity": obj.get("maximumCapacity"),
            "enablementMinimum": obj.get("enablementMinimum"),
            "enablementMinimumValueUsed": obj.get("enablementMinimumValueUsed"),
            "lowBreakpoint": obj.get("lowBreakpoint"),
            "lowBreakpointValueUsed": obj.get("lowBreakpointValueUsed"),
            "highBreakpoint": obj.get("highBreakpoint"),
            "highBreakpointValueUsed": obj.get("highBreakpointValueUsed"),
            "enablementMaximum": obj.get("enablementMaximum"),
            "enablementMaximumValueUsed": obj.get("enablementMaximumValueUsed")
        })
        return _obj


