# coding: utf-8

"""
    WEMDE Dispatch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from wemde_dispatch_client.models.fsip import Fsip
from wemde_dispatch_client.models.tranch import Tranch
from typing import Optional, Set
from typing_extensions import Self

class EnergyFacility(BaseModel):
    """
    An array of Facilities with Real-Time Market Submissions for the relevant Market Service.
    """ # noqa: E501
    dsp_unconstrained_withdrawal_quantity: Union[StrictFloat, StrictInt] = Field(alias="dspUnconstrainedWithdrawalQuantity")
    dsp_constrained_withdrawal_quantity: Union[StrictFloat, StrictInt] = Field(alias="dspConstrainedWithdrawalQuantity")
    facility_code: StrictStr = Field(description="The Facility to which the Real-Time Market Submission applies to.", alias="facilityCode")
    submission_id: StrictStr = Field(description="The submission Id associated with the Real-Time Market Submission.", alias="submissionId")
    submission_code: StrictStr = Field(alias="submissionCode")
    max_injection_capacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Maximum Capacity the Facility can deliver in a Dispatch Interval.", alias="maxInjectionCapacity")
    max_withdrawal_capacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Maximum Capacity the Facility can consume in a Dispatch Interval.", alias="maxWithdrawalCapacity")
    unconstrained_injection_forecast: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="unconstrainedInjectionForecast")
    unconstrained_withdrawal_forecast: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="unconstrainedWithdrawalForecast")
    inflexible_flag: Optional[StrictBool] = Field(default=None, description="The ability of the Facility to be dispatched in a Dispatch Interval for a fixed level of Injection or Withdrawal specified in the tranche.", alias="inflexibleFlag")
    max_upward_ramp_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The maximum rate of increase in output per minute of the Facility.", alias="maxUpwardRampRate")
    downwards_ramp_rate_value_used: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="downwardsRampRateValueUsed")
    max_downward_ramp_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The maximum rate of reduction in output per minute of a Registered Facility.", alias="maxDownwardRampRate")
    upwards_ramp_rate_value_used: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="upwardsRampRateValueUsed")
    fsip: Optional[Fsip] = None
    tranches: Optional[List[Tranch]] = Field(default=None, description="An array of tranches. The Price-Quantity pairs and other components submitted by a Market Participant for a Dispatch Interval. The tranche can be one up to 10 tranches.")
    __properties: ClassVar[List[str]] = ["dspUnconstrainedWithdrawalQuantity", "dspConstrainedWithdrawalQuantity", "facilityCode", "submissionId", "submissionCode", "maxInjectionCapacity", "maxWithdrawalCapacity", "unconstrainedInjectionForecast", "unconstrainedWithdrawalForecast", "inflexibleFlag", "maxUpwardRampRate", "downwardsRampRateValueUsed", "maxDownwardRampRate", "upwardsRampRateValueUsed", "fsip", "tranches"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnergyFacility from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fsip
        if self.fsip:
            _dict['fsip'] = self.fsip.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tranches (list)
        _items = []
        if self.tranches:
            for _item in self.tranches:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tranches'] = _items
        # set to None if tranches (nullable) is None
        # and model_fields_set contains the field
        if self.tranches is None and "tranches" in self.model_fields_set:
            _dict['tranches'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnergyFacility from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dspUnconstrainedWithdrawalQuantity": obj.get("dspUnconstrainedWithdrawalQuantity"),
            "dspConstrainedWithdrawalQuantity": obj.get("dspConstrainedWithdrawalQuantity"),
            "facilityCode": obj.get("facilityCode"),
            "submissionId": obj.get("submissionId"),
            "submissionCode": obj.get("submissionCode"),
            "maxInjectionCapacity": obj.get("maxInjectionCapacity"),
            "maxWithdrawalCapacity": obj.get("maxWithdrawalCapacity"),
            "unconstrainedInjectionForecast": obj.get("unconstrainedInjectionForecast"),
            "unconstrainedWithdrawalForecast": obj.get("unconstrainedWithdrawalForecast"),
            "inflexibleFlag": obj.get("inflexibleFlag"),
            "maxUpwardRampRate": obj.get("maxUpwardRampRate"),
            "downwardsRampRateValueUsed": obj.get("downwardsRampRateValueUsed"),
            "maxDownwardRampRate": obj.get("maxDownwardRampRate"),
            "upwardsRampRateValueUsed": obj.get("upwardsRampRateValueUsed"),
            "fsip": Fsip.from_dict(obj["fsip"]) if obj.get("fsip") is not None else None,
            "tranches": [Tranch.from_dict(_item) for _item in obj["tranches"]] if obj.get("tranches") is not None else None
        })
        return _obj


