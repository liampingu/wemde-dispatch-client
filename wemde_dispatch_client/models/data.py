# coding: utf-8

"""
    WEMDE Dispatch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wemde_dispatch_client.models.constraint_look_up import ConstraintLookUp
from wemde_dispatch_client.models.constraint_violation_parameter import ConstraintViolationParameter
from wemde_dispatch_client.models.constraints import Constraints
from wemde_dispatch_client.models.dfcm_data import DfcmData
from wemde_dispatch_client.models.facility_loss_factor import FacilityLossFactor
from wemde_dispatch_client.models.market import Market
from wemde_dispatch_client.models.market_services_price_flag import MarketServicesPriceFlag
from wemde_dispatch_client.models.parameter import Parameter
from wemde_dispatch_client.models.rcm_datum import RcmDatum
from wemde_dispatch_client.models.registration_datum import RegistrationDatum
from wemde_dispatch_client.models.scadum import Scadum
from wemde_dispatch_client.models.unconstrained_forecast_datum import UnconstrainedForecastDatum
from typing import Optional, Set
from typing_extensions import Self

class Data(BaseModel):
    """
    Data
    """ # noqa: E501
    scenario: Optional[StrictStr] = None
    dispatch_interval: datetime = Field(description="Target Dispatch Interval for which the relevant Market Schedules are being calculated.", alias="dispatchInterval")
    parameters: List[Parameter] = Field(description="An array of the Dispatch Solver Parameters for each Dispatch Interval or Trading Interval.")
    constraint_violation_parameters: List[ConstraintViolationParameter] = Field(description="An array of the Constraint Violation Parameters for each Dispatch Interval or Trading Interval. Refer to the XXX procedure", alias="constraintViolationParameters")
    scada: List[Scadum] = Field(description="Real-Time inputs used in network constraint equations and Dispatch Engine calculations.  An array of data point inputs and its associated properties.")
    constraint_look_up: Optional[ConstraintLookUp] = Field(default=None, alias="constraintLookUp")
    constraints: Optional[Constraints] = None
    dfcm_data: Optional[DfcmData] = Field(default=None, alias="dfcmData")
    unconstrained_forecast: Optional[List[UnconstrainedForecastDatum]] = Field(default=None, alias="unconstrainedForecast")
    registration_data: List[RegistrationDatum] = Field(description="An array of Registration data for Registered Facilities.", alias="registrationData")
    facility_loss_factors: List[FacilityLossFactor] = Field(description="An array of Facility Loss Factors.", alias="facilityLossFactors")
    rcm_data: Optional[List[RcmDatum]] = Field(default=None, description="An array of Relevant Demands and Reserve Capacity Obligation Quantities from the Reserve Capacity Mechanism 463 (RCM).", alias="rcmData")
    market_services_price_flag: Optional[MarketServicesPriceFlag] = Field(default=None, alias="marketServicesPriceFlag")
    markets: Market
    __properties: ClassVar[List[str]] = ["scenario", "dispatchInterval", "parameters", "constraintViolationParameters", "scada", "constraintLookUp", "constraints", "dfcmData", "unconstrainedForecast", "registrationData", "facilityLossFactors", "rcmData", "marketServicesPriceFlag", "markets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Data from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item in self.parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in constraint_violation_parameters (list)
        _items = []
        if self.constraint_violation_parameters:
            for _item in self.constraint_violation_parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['constraintViolationParameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in scada (list)
        _items = []
        if self.scada:
            for _item in self.scada:
                if _item:
                    _items.append(_item.to_dict())
            _dict['scada'] = _items
        # override the default output from pydantic by calling `to_dict()` of constraint_look_up
        if self.constraint_look_up:
            _dict['constraintLookUp'] = self.constraint_look_up.to_dict()
        # override the default output from pydantic by calling `to_dict()` of constraints
        if self.constraints:
            _dict['constraints'] = self.constraints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dfcm_data
        if self.dfcm_data:
            _dict['dfcmData'] = self.dfcm_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in unconstrained_forecast (list)
        _items = []
        if self.unconstrained_forecast:
            for _item in self.unconstrained_forecast:
                if _item:
                    _items.append(_item.to_dict())
            _dict['unconstrainedForecast'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in registration_data (list)
        _items = []
        if self.registration_data:
            for _item in self.registration_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['registrationData'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in facility_loss_factors (list)
        _items = []
        if self.facility_loss_factors:
            for _item in self.facility_loss_factors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['facilityLossFactors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rcm_data (list)
        _items = []
        if self.rcm_data:
            for _item in self.rcm_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rcmData'] = _items
        # override the default output from pydantic by calling `to_dict()` of market_services_price_flag
        if self.market_services_price_flag:
            _dict['marketServicesPriceFlag'] = self.market_services_price_flag.to_dict()
        # override the default output from pydantic by calling `to_dict()` of markets
        if self.markets:
            _dict['markets'] = self.markets.to_dict()
        # set to None if scenario (nullable) is None
        # and model_fields_set contains the field
        if self.scenario is None and "scenario" in self.model_fields_set:
            _dict['scenario'] = None

        # set to None if unconstrained_forecast (nullable) is None
        # and model_fields_set contains the field
        if self.unconstrained_forecast is None and "unconstrained_forecast" in self.model_fields_set:
            _dict['unconstrainedForecast'] = None

        # set to None if rcm_data (nullable) is None
        # and model_fields_set contains the field
        if self.rcm_data is None and "rcm_data" in self.model_fields_set:
            _dict['rcmData'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Data from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "scenario": obj.get("scenario"),
            "dispatchInterval": obj.get("dispatchInterval"),
            "parameters": [Parameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "constraintViolationParameters": [ConstraintViolationParameter.from_dict(_item) for _item in obj["constraintViolationParameters"]] if obj.get("constraintViolationParameters") is not None else None,
            "scada": [Scadum.from_dict(_item) for _item in obj["scada"]] if obj.get("scada") is not None else None,
            "constraintLookUp": ConstraintLookUp.from_dict(obj["constraintLookUp"]) if obj.get("constraintLookUp") is not None else None,
            "constraints": Constraints.from_dict(obj["constraints"]) if obj.get("constraints") is not None else None,
            "dfcmData": DfcmData.from_dict(obj["dfcmData"]) if obj.get("dfcmData") is not None else None,
            "unconstrainedForecast": [UnconstrainedForecastDatum.from_dict(_item) for _item in obj["unconstrainedForecast"]] if obj.get("unconstrainedForecast") is not None else None,
            "registrationData": [RegistrationDatum.from_dict(_item) for _item in obj["registrationData"]] if obj.get("registrationData") is not None else None,
            "facilityLossFactors": [FacilityLossFactor.from_dict(_item) for _item in obj["facilityLossFactors"]] if obj.get("facilityLossFactors") is not None else None,
            "rcmData": [RcmDatum.from_dict(_item) for _item in obj["rcmData"]] if obj.get("rcmData") is not None else None,
            "marketServicesPriceFlag": MarketServicesPriceFlag.from_dict(obj["marketServicesPriceFlag"]) if obj.get("marketServicesPriceFlag") is not None else None,
            "markets": Market.from_dict(obj["markets"]) if obj.get("markets") is not None else None
        })
        return _obj


