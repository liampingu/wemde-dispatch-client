# coding: utf-8

"""
    WEMDE Dispatch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ContingencySolution(BaseModel):
    """
    ContingencySolution
    """ # noqa: E501
    solved_inertia: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Solved Inertia level used from the DFCM matrix lookup", alias="solvedInertia")
    solved_contingency: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Solved Contingency level used from the DFCM matrix lookup", alias="solvedContingency")
    contingency_raise_requirement: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total Contingency Raise requirement in which Contingency Raise shortfall is excluded", alias="contingencyRaiseRequirement")
    contingency_raise_deficit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Additional Contingency Raise amount required to satisfy the Contingency Raise Requirement", alias="contingencyRaiseDeficit")
    demand_level: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Solved Demand level used from the DFCM matrix lookup", alias="demandLevel")
    cleared_contingency_raise: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Required Contingency Raise Capacity to be dispatched in MW", alias="clearedContingencyRaise")
    largest_contingency: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Value of the largest credible supply contingency", alias="largestContingency")
    contingency_raise_offset: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Determined offset value of the Contingency Reserve Raise - positive value means less Contingency Raise is required and a negative value means additional Contingency Raise is required", alias="contingencyRaiseOffset")
    contingency_lower_offset: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Determined offset value of the Contingency Reserve Lower - positive value means less Contingency Lower is required and a negative value means additional Contingency Lower is required", alias="contingencyLowerOffset")
    __properties: ClassVar[List[str]] = ["solvedInertia", "solvedContingency", "contingencyRaiseRequirement", "contingencyRaiseDeficit", "demandLevel", "clearedContingencyRaise", "largestContingency", "contingencyRaiseOffset", "contingencyLowerOffset"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContingencySolution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if solved_inertia (nullable) is None
        # and model_fields_set contains the field
        if self.solved_inertia is None and "solved_inertia" in self.model_fields_set:
            _dict['solvedInertia'] = None

        # set to None if solved_contingency (nullable) is None
        # and model_fields_set contains the field
        if self.solved_contingency is None and "solved_contingency" in self.model_fields_set:
            _dict['solvedContingency'] = None

        # set to None if contingency_raise_requirement (nullable) is None
        # and model_fields_set contains the field
        if self.contingency_raise_requirement is None and "contingency_raise_requirement" in self.model_fields_set:
            _dict['contingencyRaiseRequirement'] = None

        # set to None if contingency_raise_deficit (nullable) is None
        # and model_fields_set contains the field
        if self.contingency_raise_deficit is None and "contingency_raise_deficit" in self.model_fields_set:
            _dict['contingencyRaiseDeficit'] = None

        # set to None if demand_level (nullable) is None
        # and model_fields_set contains the field
        if self.demand_level is None and "demand_level" in self.model_fields_set:
            _dict['demandLevel'] = None

        # set to None if cleared_contingency_raise (nullable) is None
        # and model_fields_set contains the field
        if self.cleared_contingency_raise is None and "cleared_contingency_raise" in self.model_fields_set:
            _dict['clearedContingencyRaise'] = None

        # set to None if largest_contingency (nullable) is None
        # and model_fields_set contains the field
        if self.largest_contingency is None and "largest_contingency" in self.model_fields_set:
            _dict['largestContingency'] = None

        # set to None if contingency_raise_offset (nullable) is None
        # and model_fields_set contains the field
        if self.contingency_raise_offset is None and "contingency_raise_offset" in self.model_fields_set:
            _dict['contingencyRaiseOffset'] = None

        # set to None if contingency_lower_offset (nullable) is None
        # and model_fields_set contains the field
        if self.contingency_lower_offset is None and "contingency_lower_offset" in self.model_fields_set:
            _dict['contingencyLowerOffset'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContingencySolution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "solvedInertia": obj.get("solvedInertia"),
            "solvedContingency": obj.get("solvedContingency"),
            "contingencyRaiseRequirement": obj.get("contingencyRaiseRequirement"),
            "contingencyRaiseDeficit": obj.get("contingencyRaiseDeficit"),
            "demandLevel": obj.get("demandLevel"),
            "clearedContingencyRaise": obj.get("clearedContingencyRaise"),
            "largestContingency": obj.get("largestContingency"),
            "contingencyRaiseOffset": obj.get("contingencyRaiseOffset"),
            "contingencyLowerOffset": obj.get("contingencyLowerOffset")
        })
        return _obj


