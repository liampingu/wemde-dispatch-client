# coding: utf-8

"""
    WEMDE Dispatch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from wemde_dispatch_client.models.facility_schedule_detail import FacilityScheduleDetail
from wemde_dispatch_client.models.markets import Markets
from wemde_dispatch_client.models.prices import Prices
from wemde_dispatch_client.models.schedule import Schedule
from wemde_dispatch_client.models.trapezium_adjustment import TrapeziumAdjustment
from typing import Optional, Set
from typing_extensions import Self

class DispatchSummaryData(BaseModel):
    """
    DispatchSummaryData
    """ # noqa: E501
    dispatch_interval: Optional[datetime] = Field(default=None, description="Target Dispatch Interval of the Solution.", alias="dispatchInterval")
    markets: Optional[Markets] = None
    schedule: Optional[List[Schedule]] = Field(default=None, description="An array of schedule to determine the associated forecast Dispatch Targets, Dispatch Caps, Dispatch Forecasts and Essential System Services Enablement Quantities   for each Dispatch Interval or Pre-Dispatch Interval.")
    facility_schedule_details: Optional[List[FacilityScheduleDetail]] = Field(default=None, description="An array of Facility Schedule Details associated with the Facility in the Solution.", alias="facilityScheduleDetails")
    trapezium_adjustments: Optional[List[TrapeziumAdjustment]] = Field(default=None, description=" An array of Trapezium Adjustments that determines the final value used for Enablement Minimum, Enablement Maximum, Low Breakpoint, High Breakpoint, and Ramp-Rates for any Registered Facility participating   in the provision of an Essential System Service based on information available to AEMO from various sources.", alias="trapeziumAdjustments")
    prices: Optional[Prices] = None
    __properties: ClassVar[List[str]] = ["dispatchInterval", "markets", "schedule", "facilityScheduleDetails", "trapeziumAdjustments", "prices"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DispatchSummaryData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of markets
        if self.markets:
            _dict['markets'] = self.markets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in schedule (list)
        _items = []
        if self.schedule:
            for _item in self.schedule:
                if _item:
                    _items.append(_item.to_dict())
            _dict['schedule'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in facility_schedule_details (list)
        _items = []
        if self.facility_schedule_details:
            for _item in self.facility_schedule_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['facilityScheduleDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trapezium_adjustments (list)
        _items = []
        if self.trapezium_adjustments:
            for _item in self.trapezium_adjustments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['trapeziumAdjustments'] = _items
        # override the default output from pydantic by calling `to_dict()` of prices
        if self.prices:
            _dict['prices'] = self.prices.to_dict()
        # set to None if schedule (nullable) is None
        # and model_fields_set contains the field
        if self.schedule is None and "schedule" in self.model_fields_set:
            _dict['schedule'] = None

        # set to None if facility_schedule_details (nullable) is None
        # and model_fields_set contains the field
        if self.facility_schedule_details is None and "facility_schedule_details" in self.model_fields_set:
            _dict['facilityScheduleDetails'] = None

        # set to None if trapezium_adjustments (nullable) is None
        # and model_fields_set contains the field
        if self.trapezium_adjustments is None and "trapezium_adjustments" in self.model_fields_set:
            _dict['trapeziumAdjustments'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DispatchSummaryData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dispatchInterval": obj.get("dispatchInterval"),
            "markets": Markets.from_dict(obj["markets"]) if obj.get("markets") is not None else None,
            "schedule": [Schedule.from_dict(_item) for _item in obj["schedule"]] if obj.get("schedule") is not None else None,
            "facilityScheduleDetails": [FacilityScheduleDetail.from_dict(_item) for _item in obj["facilityScheduleDetails"]] if obj.get("facilityScheduleDetails") is not None else None,
            "trapeziumAdjustments": [TrapeziumAdjustment.from_dict(_item) for _item in obj["trapeziumAdjustments"]] if obj.get("trapeziumAdjustments") is not None else None,
            "prices": Prices.from_dict(obj["prices"]) if obj.get("prices") is not None else None
        })
        return _obj


