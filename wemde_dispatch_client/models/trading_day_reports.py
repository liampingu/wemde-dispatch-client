# coding: utf-8

"""
    WEMDE Dispatch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from wemde_dispatch_client.models.congestion_rental_calculation import CongestionRentalCalculation
from wemde_dispatch_client.models.dsp_reduction_instruction import DspReductionInstruction
from wemde_dispatch_client.models.energy_uplift_prices_and_uplift_payment_mispricing_trigger import EnergyUpliftPricesAndUpliftPaymentMispricingTrigger
from wemde_dispatch_client.models.facility_risk_calculation import FacilityRiskCalculation
from wemde_dispatch_client.models.network_risk_calculation import NetworkRiskCalculation
from typing import Optional, Set
from typing_extensions import Self

class TradingDayReports(BaseModel):
    """
    TradingDayReports
    """ # noqa: E501
    trading_day: Optional[datetime] = Field(default=None, alias="tradingDay")
    dsp_reduction_instructions: Optional[List[DspReductionInstruction]] = Field(default=None, alias="dspReductionInstructions")
    congestion_rental_calculations: Optional[List[CongestionRentalCalculation]] = Field(default=None, alias="congestionRentalCalculations")
    facility_risk_calculations: Optional[List[FacilityRiskCalculation]] = Field(default=None, alias="facilityRiskCalculations")
    network_risk_calculations: Optional[List[NetworkRiskCalculation]] = Field(default=None, alias="networkRiskCalculations")
    energy_uplift_prices_and_uplift_payment_mispricing_triggers: Optional[List[EnergyUpliftPricesAndUpliftPaymentMispricingTrigger]] = Field(default=None, alias="energyUpliftPricesAndUpliftPaymentMispricingTriggers")
    __properties: ClassVar[List[str]] = ["tradingDay", "dspReductionInstructions", "congestionRentalCalculations", "facilityRiskCalculations", "networkRiskCalculations", "energyUpliftPricesAndUpliftPaymentMispricingTriggers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TradingDayReports from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dsp_reduction_instructions (list)
        _items = []
        if self.dsp_reduction_instructions:
            for _item in self.dsp_reduction_instructions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dspReductionInstructions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in congestion_rental_calculations (list)
        _items = []
        if self.congestion_rental_calculations:
            for _item in self.congestion_rental_calculations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['congestionRentalCalculations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in facility_risk_calculations (list)
        _items = []
        if self.facility_risk_calculations:
            for _item in self.facility_risk_calculations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['facilityRiskCalculations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in network_risk_calculations (list)
        _items = []
        if self.network_risk_calculations:
            for _item in self.network_risk_calculations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['networkRiskCalculations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in energy_uplift_prices_and_uplift_payment_mispricing_triggers (list)
        _items = []
        if self.energy_uplift_prices_and_uplift_payment_mispricing_triggers:
            for _item in self.energy_uplift_prices_and_uplift_payment_mispricing_triggers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['energyUpliftPricesAndUpliftPaymentMispricingTriggers'] = _items
        # set to None if dsp_reduction_instructions (nullable) is None
        # and model_fields_set contains the field
        if self.dsp_reduction_instructions is None and "dsp_reduction_instructions" in self.model_fields_set:
            _dict['dspReductionInstructions'] = None

        # set to None if congestion_rental_calculations (nullable) is None
        # and model_fields_set contains the field
        if self.congestion_rental_calculations is None and "congestion_rental_calculations" in self.model_fields_set:
            _dict['congestionRentalCalculations'] = None

        # set to None if facility_risk_calculations (nullable) is None
        # and model_fields_set contains the field
        if self.facility_risk_calculations is None and "facility_risk_calculations" in self.model_fields_set:
            _dict['facilityRiskCalculations'] = None

        # set to None if network_risk_calculations (nullable) is None
        # and model_fields_set contains the field
        if self.network_risk_calculations is None and "network_risk_calculations" in self.model_fields_set:
            _dict['networkRiskCalculations'] = None

        # set to None if energy_uplift_prices_and_uplift_payment_mispricing_triggers (nullable) is None
        # and model_fields_set contains the field
        if self.energy_uplift_prices_and_uplift_payment_mispricing_triggers is None and "energy_uplift_prices_and_uplift_payment_mispricing_triggers" in self.model_fields_set:
            _dict['energyUpliftPricesAndUpliftPaymentMispricingTriggers'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TradingDayReports from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tradingDay": obj.get("tradingDay"),
            "dspReductionInstructions": [DspReductionInstruction.from_dict(_item) for _item in obj["dspReductionInstructions"]] if obj.get("dspReductionInstructions") is not None else None,
            "congestionRentalCalculations": [CongestionRentalCalculation.from_dict(_item) for _item in obj["congestionRentalCalculations"]] if obj.get("congestionRentalCalculations") is not None else None,
            "facilityRiskCalculations": [FacilityRiskCalculation.from_dict(_item) for _item in obj["facilityRiskCalculations"]] if obj.get("facilityRiskCalculations") is not None else None,
            "networkRiskCalculations": [NetworkRiskCalculation.from_dict(_item) for _item in obj["networkRiskCalculations"]] if obj.get("networkRiskCalculations") is not None else None,
            "energyUpliftPricesAndUpliftPaymentMispricingTriggers": [EnergyUpliftPricesAndUpliftPaymentMispricingTrigger.from_dict(_item) for _item in obj["energyUpliftPricesAndUpliftPaymentMispricingTriggers"]] if obj.get("energyUpliftPricesAndUpliftPaymentMispricingTriggers") is not None else None
        })
        return _obj


