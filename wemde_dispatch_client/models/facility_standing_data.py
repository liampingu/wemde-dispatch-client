# coding: utf-8

"""
    WEMDE Dispatch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from wemde_dispatch_client.models.unconstrained_forecast_source_types import UnconstrainedForecastSourceTypes
from typing import Optional, Set
from typing_extensions import Self

class FacilityStandingData(BaseModel):
    """
    Facility Standing data of the Facility.
    """ # noqa: E501
    facility_registration_status: StrictStr = Field(description="The Facility Registration Status of the Facility.", alias="facilityRegistrationStatus")
    facility_class: StrictStr = Field(description="The Facility Class where the Facility belongs to.", alias="facilityClass")
    storage_constraints: StrictBool = Field(description="The flag that determines if the Facility is subject to WEMDE Storage Constraints or not.", alias="storageConstraints")
    inertia: Union[StrictFloat, StrictInt] = Field(description="The associated Inertia with the Facility.")
    tau_factor: Union[StrictFloat, StrictInt] = Field(description="The associated Tau Factor with the Facility.", alias="tauFactor")
    unconstrained_forecast_source: UnconstrainedForecastSourceTypes = Field(alias="unconstrainedForecastSource")
    effective_dispatch_interval_from: datetime = Field(description="Timestamp of when the Registration data is expected to start its effectivity.", alias="effectiveDispatchIntervalFrom")
    __properties: ClassVar[List[str]] = ["facilityRegistrationStatus", "facilityClass", "storageConstraints", "inertia", "tauFactor", "unconstrainedForecastSource", "effectiveDispatchIntervalFrom"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FacilityStandingData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FacilityStandingData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "facilityRegistrationStatus": obj.get("facilityRegistrationStatus"),
            "facilityClass": obj.get("facilityClass"),
            "storageConstraints": obj.get("storageConstraints"),
            "inertia": obj.get("inertia"),
            "tauFactor": obj.get("tauFactor"),
            "unconstrainedForecastSource": obj.get("unconstrainedForecastSource"),
            "effectiveDispatchIntervalFrom": obj.get("effectiveDispatchIntervalFrom")
        })
        return _obj


