# coding: utf-8

"""
    WEMDE Dispatch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from wemde_dispatch_client.models.left_hand_side import LeftHandSide
from wemde_dispatch_client.models.right_hand_side import RightHandSide
from typing import Optional, Set
from typing_extensions import Self

class ConstraintEquation(BaseModel):
    """
    ConstraintEquation
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Id of the Constraint Equation.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the Constraint Equation.")
    comments: Optional[StrictStr] = Field(default=None, description="Comments on the Constraint Equation.")
    left_hand_side: Optional[List[LeftHandSide]] = Field(default=None, description="An array of the Left-Hand side terms of the relevant Constraint Equation.", alias="leftHandSide")
    operator: Optional[StrictStr] = Field(default=None, description="The operator of the Constraint Equation.")
    right_hand_side: Optional[List[RightHandSide]] = Field(default=None, description="An array of the Right-Hand side terms of the relevant Constraint Equation.", alias="rightHandSide")
    right_hand_side_script: Optional[StrictStr] = Field(default=None, description="The equivalent Right-Hand side equation of the Right-Hand side terms of the Constraint Equation.", alias="rightHandSideScript")
    required: Optional[StrictBool] = Field(default=None, description="Flag to indicate if the Constraint Equation is required or not.")
    limit_type: Optional[StrictStr] = Field(default=None, description="The Limit Type of the Constriant Equation.", alias="limitType")
    limit_advice_id: Optional[StrictStr] = Field(default=None, description="The Id of the Limit Advice.", alias="limitAdviceId")
    is_intervention_event: Optional[StrictBool] = Field(default=None, alias="isInterventionEvent")
    constraint_type: Optional[StrictStr] = Field(default=None, alias="constraintType")
    default_rhs: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The default Right-Hand side value of the Constraint Equation if the resolved Right-Hand side terms.", alias="defaultRHS")
    violation_penalty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The penalty value associated with Constraint Equation when it is violated.", alias="violationPenalty")
    contingency: Optional[StrictStr] = Field(default=None, description="The contingency element associated with the Constraint Equation.")
    monitored_element: Optional[StrictStr] = Field(default=None, description="The equipment or entity associated with the Constraint Equation.", alias="monitoredElement")
    version: Optional[StrictInt] = Field(default=None, description="The version of the Constraint Equation.")
    system_configuration: Optional[StrictStr] = Field(default=None, alias="systemConfiguration")
    __properties: ClassVar[List[str]] = ["id", "description", "comments", "leftHandSide", "operator", "rightHandSide", "rightHandSideScript", "required", "limitType", "limitAdviceId", "isInterventionEvent", "constraintType", "defaultRHS", "violationPenalty", "contingency", "monitoredElement", "version", "systemConfiguration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConstraintEquation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in left_hand_side (list)
        _items = []
        if self.left_hand_side:
            for _item in self.left_hand_side:
                if _item:
                    _items.append(_item.to_dict())
            _dict['leftHandSide'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in right_hand_side (list)
        _items = []
        if self.right_hand_side:
            for _item in self.right_hand_side:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rightHandSide'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if comments (nullable) is None
        # and model_fields_set contains the field
        if self.comments is None and "comments" in self.model_fields_set:
            _dict['comments'] = None

        # set to None if left_hand_side (nullable) is None
        # and model_fields_set contains the field
        if self.left_hand_side is None and "left_hand_side" in self.model_fields_set:
            _dict['leftHandSide'] = None

        # set to None if operator (nullable) is None
        # and model_fields_set contains the field
        if self.operator is None and "operator" in self.model_fields_set:
            _dict['operator'] = None

        # set to None if right_hand_side (nullable) is None
        # and model_fields_set contains the field
        if self.right_hand_side is None and "right_hand_side" in self.model_fields_set:
            _dict['rightHandSide'] = None

        # set to None if right_hand_side_script (nullable) is None
        # and model_fields_set contains the field
        if self.right_hand_side_script is None and "right_hand_side_script" in self.model_fields_set:
            _dict['rightHandSideScript'] = None

        # set to None if limit_type (nullable) is None
        # and model_fields_set contains the field
        if self.limit_type is None and "limit_type" in self.model_fields_set:
            _dict['limitType'] = None

        # set to None if limit_advice_id (nullable) is None
        # and model_fields_set contains the field
        if self.limit_advice_id is None and "limit_advice_id" in self.model_fields_set:
            _dict['limitAdviceId'] = None

        # set to None if constraint_type (nullable) is None
        # and model_fields_set contains the field
        if self.constraint_type is None and "constraint_type" in self.model_fields_set:
            _dict['constraintType'] = None

        # set to None if contingency (nullable) is None
        # and model_fields_set contains the field
        if self.contingency is None and "contingency" in self.model_fields_set:
            _dict['contingency'] = None

        # set to None if monitored_element (nullable) is None
        # and model_fields_set contains the field
        if self.monitored_element is None and "monitored_element" in self.model_fields_set:
            _dict['monitoredElement'] = None

        # set to None if system_configuration (nullable) is None
        # and model_fields_set contains the field
        if self.system_configuration is None and "system_configuration" in self.model_fields_set:
            _dict['systemConfiguration'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConstraintEquation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "description": obj.get("description"),
            "comments": obj.get("comments"),
            "leftHandSide": [LeftHandSide.from_dict(_item) for _item in obj["leftHandSide"]] if obj.get("leftHandSide") is not None else None,
            "operator": obj.get("operator"),
            "rightHandSide": [RightHandSide.from_dict(_item) for _item in obj["rightHandSide"]] if obj.get("rightHandSide") is not None else None,
            "rightHandSideScript": obj.get("rightHandSideScript"),
            "required": obj.get("required"),
            "limitType": obj.get("limitType"),
            "limitAdviceId": obj.get("limitAdviceId"),
            "isInterventionEvent": obj.get("isInterventionEvent"),
            "constraintType": obj.get("constraintType"),
            "defaultRHS": obj.get("defaultRHS"),
            "violationPenalty": obj.get("violationPenalty"),
            "contingency": obj.get("contingency"),
            "monitoredElement": obj.get("monitoredElement"),
            "version": obj.get("version"),
            "systemConfiguration": obj.get("systemConfiguration")
        })
        return _obj


