# coding: utf-8

"""
    WEMDE Dispatch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class TrapeziumAdjustmentDetail(BaseModel):
    """
    TrapeziumAdjustmentDetail
    """ # noqa: E501
    facility_code: Optional[StrictStr] = Field(default=None, description="Facility Code to which the associated values of Trapezium Adjustments applies to", alias="facilityCode")
    enablement_minimum_value_used: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enablement Minimum Value used in the Dispatch Engine", alias="enablementMinimumValueUsed")
    low_breakpoint_value_used: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Low Breakpoint Value used in the Dispatch Engine", alias="lowBreakpointValueUsed")
    high_breakpoint_value_used: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="High Breakpoint Value used in the Dispatch Engine", alias="highBreakpointValueUsed")
    enablement_maximum_value_used: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enablement Maximum Value used in the Dispatch Engine", alias="enablementMaximumValueUsed")
    downwards_ramp_rate_value_used: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Downwards Ramp Rate Value used in the Dispatch Engine", alias="downwardsRampRateValueUsed")
    upwards_ramp_rate_value_used: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Upwards Ramp Rate Value used in the Dispatch Engine", alias="upwardsRampRateValueUsed")
    __properties: ClassVar[List[str]] = ["facilityCode", "enablementMinimumValueUsed", "lowBreakpointValueUsed", "highBreakpointValueUsed", "enablementMaximumValueUsed", "downwardsRampRateValueUsed", "upwardsRampRateValueUsed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrapeziumAdjustmentDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if facility_code (nullable) is None
        # and model_fields_set contains the field
        if self.facility_code is None and "facility_code" in self.model_fields_set:
            _dict['facilityCode'] = None

        # set to None if enablement_minimum_value_used (nullable) is None
        # and model_fields_set contains the field
        if self.enablement_minimum_value_used is None and "enablement_minimum_value_used" in self.model_fields_set:
            _dict['enablementMinimumValueUsed'] = None

        # set to None if low_breakpoint_value_used (nullable) is None
        # and model_fields_set contains the field
        if self.low_breakpoint_value_used is None and "low_breakpoint_value_used" in self.model_fields_set:
            _dict['lowBreakpointValueUsed'] = None

        # set to None if high_breakpoint_value_used (nullable) is None
        # and model_fields_set contains the field
        if self.high_breakpoint_value_used is None and "high_breakpoint_value_used" in self.model_fields_set:
            _dict['highBreakpointValueUsed'] = None

        # set to None if enablement_maximum_value_used (nullable) is None
        # and model_fields_set contains the field
        if self.enablement_maximum_value_used is None and "enablement_maximum_value_used" in self.model_fields_set:
            _dict['enablementMaximumValueUsed'] = None

        # set to None if downwards_ramp_rate_value_used (nullable) is None
        # and model_fields_set contains the field
        if self.downwards_ramp_rate_value_used is None and "downwards_ramp_rate_value_used" in self.model_fields_set:
            _dict['downwardsRampRateValueUsed'] = None

        # set to None if upwards_ramp_rate_value_used (nullable) is None
        # and model_fields_set contains the field
        if self.upwards_ramp_rate_value_used is None and "upwards_ramp_rate_value_used" in self.model_fields_set:
            _dict['upwardsRampRateValueUsed'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrapeziumAdjustmentDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "facilityCode": obj.get("facilityCode"),
            "enablementMinimumValueUsed": obj.get("enablementMinimumValueUsed"),
            "lowBreakpointValueUsed": obj.get("lowBreakpointValueUsed"),
            "highBreakpointValueUsed": obj.get("highBreakpointValueUsed"),
            "enablementMaximumValueUsed": obj.get("enablementMaximumValueUsed"),
            "downwardsRampRateValueUsed": obj.get("downwardsRampRateValueUsed"),
            "upwardsRampRateValueUsed": obj.get("upwardsRampRateValueUsed")
        })
        return _obj


