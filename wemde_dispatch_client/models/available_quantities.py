# coding: utf-8

"""
    WEMDE Dispatch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AvailableQuantities(BaseModel):
    """
    AvailableQuantities
    """ # noqa: E501
    energy_injection_capacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Available Quantity of Energy Injection Capacity in MW", alias="energyInjectionCapacity")
    energy_withdrawal_capacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Available Quantity of Energy Withdrawal Capacity in MW", alias="energyWithdrawalCapacity")
    contingency_raise: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Available Quantity of Contingency Raise Capacity in MW", alias="contingencyRaise")
    contingency_lower: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Available Quantity of Contingency Lower Capacity in MW", alias="contingencyLower")
    regulation_raise: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Available Quantity of Regulation Raise Capacity in MW", alias="regulationRaise")
    regulation_lower: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Available Quantity of Regulation Lower Capacity in MW", alias="regulationLower")
    rocof: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Available Quantity of Rocof Capacity in MWs")
    __properties: ClassVar[List[str]] = ["energyInjectionCapacity", "energyWithdrawalCapacity", "contingencyRaise", "contingencyLower", "regulationRaise", "regulationLower", "rocof"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AvailableQuantities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if energy_injection_capacity (nullable) is None
        # and model_fields_set contains the field
        if self.energy_injection_capacity is None and "energy_injection_capacity" in self.model_fields_set:
            _dict['energyInjectionCapacity'] = None

        # set to None if energy_withdrawal_capacity (nullable) is None
        # and model_fields_set contains the field
        if self.energy_withdrawal_capacity is None and "energy_withdrawal_capacity" in self.model_fields_set:
            _dict['energyWithdrawalCapacity'] = None

        # set to None if contingency_raise (nullable) is None
        # and model_fields_set contains the field
        if self.contingency_raise is None and "contingency_raise" in self.model_fields_set:
            _dict['contingencyRaise'] = None

        # set to None if contingency_lower (nullable) is None
        # and model_fields_set contains the field
        if self.contingency_lower is None and "contingency_lower" in self.model_fields_set:
            _dict['contingencyLower'] = None

        # set to None if regulation_raise (nullable) is None
        # and model_fields_set contains the field
        if self.regulation_raise is None and "regulation_raise" in self.model_fields_set:
            _dict['regulationRaise'] = None

        # set to None if regulation_lower (nullable) is None
        # and model_fields_set contains the field
        if self.regulation_lower is None and "regulation_lower" in self.model_fields_set:
            _dict['regulationLower'] = None

        # set to None if rocof (nullable) is None
        # and model_fields_set contains the field
        if self.rocof is None and "rocof" in self.model_fields_set:
            _dict['rocof'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AvailableQuantities from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "energyInjectionCapacity": obj.get("energyInjectionCapacity"),
            "energyWithdrawalCapacity": obj.get("energyWithdrawalCapacity"),
            "contingencyRaise": obj.get("contingencyRaise"),
            "contingencyLower": obj.get("contingencyLower"),
            "regulationRaise": obj.get("regulationRaise"),
            "regulationLower": obj.get("regulationLower"),
            "rocof": obj.get("rocof")
        })
        return _obj


