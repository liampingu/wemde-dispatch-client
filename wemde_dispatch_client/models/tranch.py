# coding: utf-8

"""
    WEMDE Dispatch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Tranch(BaseModel):
    """
    An array of tranches. The Price-Quantity pairs and other components submitted by a Market Participant for a Dispatch Interval.The tranche can be one up to 10 tranches.
    """ # noqa: E501
    tranche: StrictInt = Field(description="The specific tranche that encapsulates a single Fuel Type, Quantity, Loss Factor Adjusted Price, Submitted Price, Capacity Type, and Sync Notice Time(if applicable).")
    fuel_type: Optional[StrictStr] = Field(default=None, description="The Facility's Fuel Type for a specific tranche.", alias="fuelType")
    quantity: Union[StrictFloat, StrictInt] = Field(description="The Injection or Withdrawal quantity offered in the tranche in MW.")
    submitted_price: Union[StrictFloat, StrictInt] = Field(description="The tranche price in $/MWh.", alias="submittedPrice")
    lfa_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Loss Factor Adjusted Price in $/MWh.", alias="lfaPrice")
    capacity_type: Optional[StrictStr] = Field(default=None, description="The Facility's Capacity Type for a specific tranche.", alias="capacityType")
    notice_time: Optional[StrictInt] = Field(default=None, description="The time in minutes the Facility needs to synchronize and deliver the quantity offered as available capacity.", alias="noticeTime")
    __properties: ClassVar[List[str]] = ["tranche", "fuelType", "quantity", "submittedPrice", "lfaPrice", "capacityType", "noticeTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Tranch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if fuel_type (nullable) is None
        # and model_fields_set contains the field
        if self.fuel_type is None and "fuel_type" in self.model_fields_set:
            _dict['fuelType'] = None

        # set to None if capacity_type (nullable) is None
        # and model_fields_set contains the field
        if self.capacity_type is None and "capacity_type" in self.model_fields_set:
            _dict['capacityType'] = None

        # set to None if notice_time (nullable) is None
        # and model_fields_set contains the field
        if self.notice_time is None and "notice_time" in self.model_fields_set:
            _dict['noticeTime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Tranch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tranche": obj.get("tranche"),
            "fuelType": obj.get("fuelType"),
            "quantity": obj.get("quantity"),
            "submittedPrice": obj.get("submittedPrice"),
            "lfaPrice": obj.get("lfaPrice"),
            "capacityType": obj.get("capacityType"),
            "noticeTime": obj.get("noticeTime")
        })
        return _obj


