# coding: utf-8

"""
    WEMDE Dispatch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class MarketShortfalls(BaseModel):
    """
    MarketShortfalls
    """ # noqa: E501
    energy_deficit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount of Energy shortfall in MW", alias="energyDeficit")
    regulation_raise_deficit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount of Regulation Raise shortfall in MW", alias="regulationRaiseDeficit")
    regulation_lower_deficit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount of Regulation Lower shortfall in MW", alias="regulationLowerDeficit")
    contingency_raise_deficit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount of Contingency Raise shortfall in MW", alias="contingencyRaiseDeficit")
    contingency_lower_deficit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount of Contingency Lower shortfall in MW", alias="contingencyLowerDeficit")
    rocof_deficit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount of Rocof shortfall in MW", alias="rocofDeficit")
    __properties: ClassVar[List[str]] = ["energyDeficit", "regulationRaiseDeficit", "regulationLowerDeficit", "contingencyRaiseDeficit", "contingencyLowerDeficit", "rocofDeficit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarketShortfalls from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if energy_deficit (nullable) is None
        # and model_fields_set contains the field
        if self.energy_deficit is None and "energy_deficit" in self.model_fields_set:
            _dict['energyDeficit'] = None

        # set to None if regulation_raise_deficit (nullable) is None
        # and model_fields_set contains the field
        if self.regulation_raise_deficit is None and "regulation_raise_deficit" in self.model_fields_set:
            _dict['regulationRaiseDeficit'] = None

        # set to None if regulation_lower_deficit (nullable) is None
        # and model_fields_set contains the field
        if self.regulation_lower_deficit is None and "regulation_lower_deficit" in self.model_fields_set:
            _dict['regulationLowerDeficit'] = None

        # set to None if contingency_raise_deficit (nullable) is None
        # and model_fields_set contains the field
        if self.contingency_raise_deficit is None and "contingency_raise_deficit" in self.model_fields_set:
            _dict['contingencyRaiseDeficit'] = None

        # set to None if contingency_lower_deficit (nullable) is None
        # and model_fields_set contains the field
        if self.contingency_lower_deficit is None and "contingency_lower_deficit" in self.model_fields_set:
            _dict['contingencyLowerDeficit'] = None

        # set to None if rocof_deficit (nullable) is None
        # and model_fields_set contains the field
        if self.rocof_deficit is None and "rocof_deficit" in self.model_fields_set:
            _dict['rocofDeficit'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarketShortfalls from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "energyDeficit": obj.get("energyDeficit"),
            "regulationRaiseDeficit": obj.get("regulationRaiseDeficit"),
            "regulationLowerDeficit": obj.get("regulationLowerDeficit"),
            "contingencyRaiseDeficit": obj.get("contingencyRaiseDeficit"),
            "contingencyLowerDeficit": obj.get("contingencyLowerDeficit"),
            "rocofDeficit": obj.get("rocofDeficit")
        })
        return _obj


