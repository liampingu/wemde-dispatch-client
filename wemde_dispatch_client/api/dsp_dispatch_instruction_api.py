# coding: utf-8

"""
    WEMDE Dispatch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from wemde_dispatch_client.models.swagger_dsp_dispatch_instructions import SwaggerDSPDispatchInstructions
from wemde_dispatch_client.models.swagger_dsp_dispatch_instructions_participant_wise import SwaggerDSPDispatchInstructionsParticipantWise
from wemde_dispatch_client.models.swagger_dsp_schedule_information import SwaggerDspScheduleInformation

from wemde_dispatch_client.api_client import ApiClient, RequestSerialized
from wemde_dispatch_client.api_response import ApiResponse
from wemde_dispatch_client.rest import RESTResponseType


class DSPDispatchInstructionApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_dspdispatchinstructionparticipantwise(
        self,
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        dispatch_interval_from: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        facility_code: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SwaggerDSPDispatchInstructionsParticipantWise:
        """Retrieves Participant wise DSP dispatch instruction for each participant

        Retrieves Participant wise DSP dispatch instruction for each participant

        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param dispatch_interval_from: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_from: str
        :param facility_code: 
        :type facility_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dspdispatchinstructionparticipantwise_serialize(
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            dispatch_interval_from=dispatch_interval_from,
            facility_code=facility_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDSPDispatchInstructionsParticipantWise",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_dspdispatchinstructionparticipantwise_with_http_info(
        self,
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        dispatch_interval_from: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        facility_code: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SwaggerDSPDispatchInstructionsParticipantWise]:
        """Retrieves Participant wise DSP dispatch instruction for each participant

        Retrieves Participant wise DSP dispatch instruction for each participant

        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param dispatch_interval_from: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_from: str
        :param facility_code: 
        :type facility_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dspdispatchinstructionparticipantwise_serialize(
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            dispatch_interval_from=dispatch_interval_from,
            facility_code=facility_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDSPDispatchInstructionsParticipantWise",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_dspdispatchinstructionparticipantwise_without_preload_content(
        self,
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        dispatch_interval_from: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        facility_code: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieves Participant wise DSP dispatch instruction for each participant

        Retrieves Participant wise DSP dispatch instruction for each participant

        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param dispatch_interval_from: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_from: str
        :param facility_code: 
        :type facility_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dspdispatchinstructionparticipantwise_serialize(
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            dispatch_interval_from=dispatch_interval_from,
            facility_code=facility_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDSPDispatchInstructionsParticipantWise",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_dspdispatchinstructionparticipantwise_serialize(
        self,
        x_initiating_participant_id,
        x_market,
        dispatch_interval_from,
        facility_code,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if dispatch_interval_from is not None:
            
            _query_params.append(('dispatchIntervalFrom', dispatch_interval_from))
            
        if facility_code is not None:
            
            _query_params.append(('facilityCode', facility_code))
            
        # process the header parameters
        if x_initiating_participant_id is not None:
            _header_params['x-initiatingParticipantId'] = x_initiating_participant_id
        if x_market is not None:
            _header_params['x-market'] = x_market
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/plain', 
                'application/json', 
                'text/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/DSPDispatchInstruction/DSPDispatchInstructionParticipantWise',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_dspdispatchinstructions(
        self,
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        facility_code: Optional[StrictStr] = None,
        interval_from: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        interval_to: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SwaggerDSPDispatchInstructions:
        """Retrieves the DSP dispatch instruction for all participants

        Retrieves the DSP dispatch instruction for all participants

        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param facility_code: 
        :type facility_code: str
        :param interval_from: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type interval_from: str
        :param interval_to: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type interval_to: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dspdispatchinstructions_serialize(
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            facility_code=facility_code,
            interval_from=interval_from,
            interval_to=interval_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDSPDispatchInstructions",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_dspdispatchinstructions_with_http_info(
        self,
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        facility_code: Optional[StrictStr] = None,
        interval_from: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        interval_to: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SwaggerDSPDispatchInstructions]:
        """Retrieves the DSP dispatch instruction for all participants

        Retrieves the DSP dispatch instruction for all participants

        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param facility_code: 
        :type facility_code: str
        :param interval_from: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type interval_from: str
        :param interval_to: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type interval_to: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dspdispatchinstructions_serialize(
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            facility_code=facility_code,
            interval_from=interval_from,
            interval_to=interval_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDSPDispatchInstructions",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_dspdispatchinstructions_without_preload_content(
        self,
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        facility_code: Optional[StrictStr] = None,
        interval_from: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        interval_to: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieves the DSP dispatch instruction for all participants

        Retrieves the DSP dispatch instruction for all participants

        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param facility_code: 
        :type facility_code: str
        :param interval_from: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type interval_from: str
        :param interval_to: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type interval_to: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dspdispatchinstructions_serialize(
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            facility_code=facility_code,
            interval_from=interval_from,
            interval_to=interval_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDSPDispatchInstructions",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_dspdispatchinstructions_serialize(
        self,
        x_initiating_participant_id,
        x_market,
        facility_code,
        interval_from,
        interval_to,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if facility_code is not None:
            
            _query_params.append(('facilityCode', facility_code))
            
        if interval_from is not None:
            
            _query_params.append(('intervalFrom', interval_from))
            
        if interval_to is not None:
            
            _query_params.append(('intervalTo', interval_to))
            
        # process the header parameters
        if x_initiating_participant_id is not None:
            _header_params['x-initiatingParticipantId'] = x_initiating_participant_id
        if x_market is not None:
            _header_params['x-market'] = x_market
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/plain', 
                'application/json', 
                'text/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/DSPDispatchInstruction/DSPDispatchInstructions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_predispatchdata(
        self,
        primary_dispatch_interval: Annotated[StrictStr, Field(description="primary dispatch interval")],
        dispatch_interval_start_date: Annotated[StrictStr, Field(description="dispatch interval start date")],
        dispatch_interval_end_date: Annotated[StrictStr, Field(description="dispatch interval end date")],
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SwaggerDspScheduleInformation:
        """Pre-Dispatch DSP Schedule information for the a specified interval (for Pre-Dispatch 2 days between start and end dates of the request)

        Pre-Dispatch DSP Schedule information for the a specified interval (for Pre-Dispatch 2 days between start and end dates of the request)

        :param primary_dispatch_interval: primary dispatch interval (required)
        :type primary_dispatch_interval: str
        :param dispatch_interval_start_date: dispatch interval start date (required)
        :type dispatch_interval_start_date: str
        :param dispatch_interval_end_date: dispatch interval end date (required)
        :type dispatch_interval_end_date: str
        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_predispatchdata_serialize(
            primary_dispatch_interval=primary_dispatch_interval,
            dispatch_interval_start_date=dispatch_interval_start_date,
            dispatch_interval_end_date=dispatch_interval_end_date,
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDspScheduleInformation",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_predispatchdata_with_http_info(
        self,
        primary_dispatch_interval: Annotated[StrictStr, Field(description="primary dispatch interval")],
        dispatch_interval_start_date: Annotated[StrictStr, Field(description="dispatch interval start date")],
        dispatch_interval_end_date: Annotated[StrictStr, Field(description="dispatch interval end date")],
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SwaggerDspScheduleInformation]:
        """Pre-Dispatch DSP Schedule information for the a specified interval (for Pre-Dispatch 2 days between start and end dates of the request)

        Pre-Dispatch DSP Schedule information for the a specified interval (for Pre-Dispatch 2 days between start and end dates of the request)

        :param primary_dispatch_interval: primary dispatch interval (required)
        :type primary_dispatch_interval: str
        :param dispatch_interval_start_date: dispatch interval start date (required)
        :type dispatch_interval_start_date: str
        :param dispatch_interval_end_date: dispatch interval end date (required)
        :type dispatch_interval_end_date: str
        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_predispatchdata_serialize(
            primary_dispatch_interval=primary_dispatch_interval,
            dispatch_interval_start_date=dispatch_interval_start_date,
            dispatch_interval_end_date=dispatch_interval_end_date,
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDspScheduleInformation",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_predispatchdata_without_preload_content(
        self,
        primary_dispatch_interval: Annotated[StrictStr, Field(description="primary dispatch interval")],
        dispatch_interval_start_date: Annotated[StrictStr, Field(description="dispatch interval start date")],
        dispatch_interval_end_date: Annotated[StrictStr, Field(description="dispatch interval end date")],
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Pre-Dispatch DSP Schedule information for the a specified interval (for Pre-Dispatch 2 days between start and end dates of the request)

        Pre-Dispatch DSP Schedule information for the a specified interval (for Pre-Dispatch 2 days between start and end dates of the request)

        :param primary_dispatch_interval: primary dispatch interval (required)
        :type primary_dispatch_interval: str
        :param dispatch_interval_start_date: dispatch interval start date (required)
        :type dispatch_interval_start_date: str
        :param dispatch_interval_end_date: dispatch interval end date (required)
        :type dispatch_interval_end_date: str
        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_predispatchdata_serialize(
            primary_dispatch_interval=primary_dispatch_interval,
            dispatch_interval_start_date=dispatch_interval_start_date,
            dispatch_interval_end_date=dispatch_interval_end_date,
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDspScheduleInformation",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_predispatchdata_serialize(
        self,
        primary_dispatch_interval,
        dispatch_interval_start_date,
        dispatch_interval_end_date,
        x_initiating_participant_id,
        x_market,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if primary_dispatch_interval is not None:
            
            _query_params.append(('primaryDispatchInterval', primary_dispatch_interval))
            
        if dispatch_interval_start_date is not None:
            
            _query_params.append(('dispatchIntervalStartDate', dispatch_interval_start_date))
            
        if dispatch_interval_end_date is not None:
            
            _query_params.append(('dispatchIntervalEndDate', dispatch_interval_end_date))
            
        # process the header parameters
        if x_initiating_participant_id is not None:
            _header_params['x-initiatingParticipantId'] = x_initiating_participant_id
        if x_market is not None:
            _header_params['x-market'] = x_market
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/plain', 
                'application/json', 
                'text/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/DSPDispatchInstruction/preDispatchData',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_weekaheaddispatchdata(
        self,
        primary_dispatch_interval: Annotated[StrictStr, Field(description="primary dispatch interval")],
        dispatch_interval_start_date: Annotated[StrictStr, Field(description="dispatch interval start date")],
        dispatch_interval_end_date: Annotated[StrictStr, Field(description="dispatch interval end date")],
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SwaggerDspScheduleInformation:
        """Week-Ahead Dispatch DSP Schedule information for the a specified interval (7 days between start and end dates for week ahead)

        Week-Ahead Dispatch DSP Schedule information for the a specified interval (7 days between start and end dates for week ahead)

        :param primary_dispatch_interval: primary dispatch interval (required)
        :type primary_dispatch_interval: str
        :param dispatch_interval_start_date: dispatch interval start date (required)
        :type dispatch_interval_start_date: str
        :param dispatch_interval_end_date: dispatch interval end date (required)
        :type dispatch_interval_end_date: str
        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_weekaheaddispatchdata_serialize(
            primary_dispatch_interval=primary_dispatch_interval,
            dispatch_interval_start_date=dispatch_interval_start_date,
            dispatch_interval_end_date=dispatch_interval_end_date,
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDspScheduleInformation",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_weekaheaddispatchdata_with_http_info(
        self,
        primary_dispatch_interval: Annotated[StrictStr, Field(description="primary dispatch interval")],
        dispatch_interval_start_date: Annotated[StrictStr, Field(description="dispatch interval start date")],
        dispatch_interval_end_date: Annotated[StrictStr, Field(description="dispatch interval end date")],
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SwaggerDspScheduleInformation]:
        """Week-Ahead Dispatch DSP Schedule information for the a specified interval (7 days between start and end dates for week ahead)

        Week-Ahead Dispatch DSP Schedule information for the a specified interval (7 days between start and end dates for week ahead)

        :param primary_dispatch_interval: primary dispatch interval (required)
        :type primary_dispatch_interval: str
        :param dispatch_interval_start_date: dispatch interval start date (required)
        :type dispatch_interval_start_date: str
        :param dispatch_interval_end_date: dispatch interval end date (required)
        :type dispatch_interval_end_date: str
        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_weekaheaddispatchdata_serialize(
            primary_dispatch_interval=primary_dispatch_interval,
            dispatch_interval_start_date=dispatch_interval_start_date,
            dispatch_interval_end_date=dispatch_interval_end_date,
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDspScheduleInformation",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_weekaheaddispatchdata_without_preload_content(
        self,
        primary_dispatch_interval: Annotated[StrictStr, Field(description="primary dispatch interval")],
        dispatch_interval_start_date: Annotated[StrictStr, Field(description="dispatch interval start date")],
        dispatch_interval_end_date: Annotated[StrictStr, Field(description="dispatch interval end date")],
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Week-Ahead Dispatch DSP Schedule information for the a specified interval (7 days between start and end dates for week ahead)

        Week-Ahead Dispatch DSP Schedule information for the a specified interval (7 days between start and end dates for week ahead)

        :param primary_dispatch_interval: primary dispatch interval (required)
        :type primary_dispatch_interval: str
        :param dispatch_interval_start_date: dispatch interval start date (required)
        :type dispatch_interval_start_date: str
        :param dispatch_interval_end_date: dispatch interval end date (required)
        :type dispatch_interval_end_date: str
        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_weekaheaddispatchdata_serialize(
            primary_dispatch_interval=primary_dispatch_interval,
            dispatch_interval_start_date=dispatch_interval_start_date,
            dispatch_interval_end_date=dispatch_interval_end_date,
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDspScheduleInformation",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_weekaheaddispatchdata_serialize(
        self,
        primary_dispatch_interval,
        dispatch_interval_start_date,
        dispatch_interval_end_date,
        x_initiating_participant_id,
        x_market,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if primary_dispatch_interval is not None:
            
            _query_params.append(('primaryDispatchInterval', primary_dispatch_interval))
            
        if dispatch_interval_start_date is not None:
            
            _query_params.append(('dispatchIntervalStartDate', dispatch_interval_start_date))
            
        if dispatch_interval_end_date is not None:
            
            _query_params.append(('dispatchIntervalEndDate', dispatch_interval_end_date))
            
        # process the header parameters
        if x_initiating_participant_id is not None:
            _header_params['x-initiatingParticipantId'] = x_initiating_participant_id
        if x_market is not None:
            _header_params['x-market'] = x_market
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/plain', 
                'application/json', 
                'text/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/DSPDispatchInstruction/weekAheadDispatchData',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_dispatchinstructionack_dispatchinstructionid(
        self,
        dispatch_instruction_id: Annotated[StrictStr, Field(description="Format - uuid.")],
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Acknowledge the Dispatch Instruction

        Acknowledge the Dispatch Instruction

        :param dispatch_instruction_id: Format - uuid. (required)
        :type dispatch_instruction_id: str
        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_dispatchinstructionack_dispatchinstructionid_serialize(
            dispatch_instruction_id=dispatch_instruction_id,
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_dispatchinstructionack_dispatchinstructionid_with_http_info(
        self,
        dispatch_instruction_id: Annotated[StrictStr, Field(description="Format - uuid.")],
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Acknowledge the Dispatch Instruction

        Acknowledge the Dispatch Instruction

        :param dispatch_instruction_id: Format - uuid. (required)
        :type dispatch_instruction_id: str
        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_dispatchinstructionack_dispatchinstructionid_serialize(
            dispatch_instruction_id=dispatch_instruction_id,
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_dispatchinstructionack_dispatchinstructionid_without_preload_content(
        self,
        dispatch_instruction_id: Annotated[StrictStr, Field(description="Format - uuid.")],
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Acknowledge the Dispatch Instruction

        Acknowledge the Dispatch Instruction

        :param dispatch_instruction_id: Format - uuid. (required)
        :type dispatch_instruction_id: str
        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_dispatchinstructionack_dispatchinstructionid_serialize(
            dispatch_instruction_id=dispatch_instruction_id,
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_dispatchinstructionack_dispatchinstructionid_serialize(
        self,
        dispatch_instruction_id,
        x_initiating_participant_id,
        x_market,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if dispatch_instruction_id is not None:
            _path_params['dispatchInstructionId'] = dispatch_instruction_id
        # process the query parameters
        # process the header parameters
        if x_initiating_participant_id is not None:
            _header_params['x-initiatingParticipantId'] = x_initiating_participant_id
        if x_market is not None:
            _header_params['x-market'] = x_market
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'text/plain', 
                'text/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/DSPDispatchInstruction/dispatchInstructionAck/{dispatchInstructionId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


