# coding: utf-8

"""
    WEMDE Dispatch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from wemde_dispatch_client.models.swagger_dispatch_data_outcomes import SwaggerDispatchDataOutcomes
from wemde_dispatch_client.models.swagger_dispatch_solution_data import SwaggerDispatchSolutionData

from wemde_dispatch_client.api_client import ApiClient, RequestSerialized
from wemde_dispatch_client.api_response import ApiResponse
from wemde_dispatch_client.rest import RESTResponseType


class DispatchSolutionApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_api_v1_dispatchsolution_dispatchdata(
        self,
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        categories: Annotated[Optional[StrictStr], Field(description="Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.")] = None,
        dispatch_scenario: Annotated[Optional[StrictStr], Field(description="Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference")] = None,
        dispatch_interval_start_date: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        dispatch_interval_end_date: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        primary_dispatch_interval: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        accept_encoding: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SwaggerDispatchSolutionData:
        """Retrieves the Solution Data for Dispatch Run

        Retrieves the Solution Data for Dispatch Run

        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param categories: Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.
        :type categories: str
        :param dispatch_scenario: Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference
        :type dispatch_scenario: str
        :param dispatch_interval_start_date: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_start_date: str
        :param dispatch_interval_end_date: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_end_date: str
        :param primary_dispatch_interval: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type primary_dispatch_interval: str
        :param accept_encoding:
        :type accept_encoding: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v1_dispatchsolution_dispatchdata_serialize(
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            categories=categories,
            dispatch_scenario=dispatch_scenario,
            dispatch_interval_start_date=dispatch_interval_start_date,
            dispatch_interval_end_date=dispatch_interval_end_date,
            primary_dispatch_interval=primary_dispatch_interval,
            accept_encoding=accept_encoding,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDispatchSolutionData",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_api_v1_dispatchsolution_dispatchdata_with_http_info(
        self,
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        categories: Annotated[Optional[StrictStr], Field(description="Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.")] = None,
        dispatch_scenario: Annotated[Optional[StrictStr], Field(description="Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference")] = None,
        dispatch_interval_start_date: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        dispatch_interval_end_date: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        primary_dispatch_interval: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        accept_encoding: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SwaggerDispatchSolutionData]:
        """Retrieves the Solution Data for Dispatch Run

        Retrieves the Solution Data for Dispatch Run

        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param categories: Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.
        :type categories: str
        :param dispatch_scenario: Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference
        :type dispatch_scenario: str
        :param dispatch_interval_start_date: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_start_date: str
        :param dispatch_interval_end_date: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_end_date: str
        :param primary_dispatch_interval: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type primary_dispatch_interval: str
        :param accept_encoding:
        :type accept_encoding: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v1_dispatchsolution_dispatchdata_serialize(
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            categories=categories,
            dispatch_scenario=dispatch_scenario,
            dispatch_interval_start_date=dispatch_interval_start_date,
            dispatch_interval_end_date=dispatch_interval_end_date,
            primary_dispatch_interval=primary_dispatch_interval,
            accept_encoding=accept_encoding,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDispatchSolutionData",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_api_v1_dispatchsolution_dispatchdata_without_preload_content(
        self,
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        categories: Annotated[Optional[StrictStr], Field(description="Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.")] = None,
        dispatch_scenario: Annotated[Optional[StrictStr], Field(description="Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference")] = None,
        dispatch_interval_start_date: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        dispatch_interval_end_date: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        primary_dispatch_interval: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        accept_encoding: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieves the Solution Data for Dispatch Run

        Retrieves the Solution Data for Dispatch Run

        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param categories: Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.
        :type categories: str
        :param dispatch_scenario: Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference
        :type dispatch_scenario: str
        :param dispatch_interval_start_date: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_start_date: str
        :param dispatch_interval_end_date: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_end_date: str
        :param primary_dispatch_interval: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type primary_dispatch_interval: str
        :param accept_encoding:
        :type accept_encoding: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v1_dispatchsolution_dispatchdata_serialize(
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            categories=categories,
            dispatch_scenario=dispatch_scenario,
            dispatch_interval_start_date=dispatch_interval_start_date,
            dispatch_interval_end_date=dispatch_interval_end_date,
            primary_dispatch_interval=primary_dispatch_interval,
            accept_encoding=accept_encoding,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDispatchSolutionData",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_api_v1_dispatchsolution_dispatchdata_serialize(
        self,
        x_initiating_participant_id,
        x_market,
        categories,
        dispatch_scenario,
        dispatch_interval_start_date,
        dispatch_interval_end_date,
        primary_dispatch_interval,
        accept_encoding,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if categories is not None:
            
            _query_params.append(('categories', categories))
            
        if dispatch_scenario is not None:
            
            _query_params.append(('dispatchScenario', dispatch_scenario))
            
        if dispatch_interval_start_date is not None:
            
            _query_params.append(('dispatchIntervalStartDate', dispatch_interval_start_date))
            
        if dispatch_interval_end_date is not None:
            
            _query_params.append(('dispatchIntervalEndDate', dispatch_interval_end_date))
            
        if primary_dispatch_interval is not None:
            
            _query_params.append(('primaryDispatchInterval', primary_dispatch_interval))
            
        # process the header parameters
        if accept_encoding is not None:
            _header_params['accept-encoding'] = accept_encoding
        if x_initiating_participant_id is not None:
            _header_params['x-initiatingParticipantId'] = x_initiating_participant_id
        if x_market is not None:
            _header_params['x-market'] = x_market
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/plain', 
                'application/json', 
                'text/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/dispatchSolution/dispatchData',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_api_v1_dispatchsolution_dispatchdataoutcomes(
        self,
        primary_dispatch_interval_from: Annotated[StrictStr, Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")],
        primary_dispatch_interval_to: Annotated[StrictStr, Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")],
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        categories: Annotated[Optional[StrictStr], Field(description="Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.")] = None,
        dispatch_scenario: Annotated[Optional[StrictStr], Field(description="Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference")] = None,
        accept_encoding: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SwaggerDispatchDataOutcomes:
        """Retrieves Solution Data from the Central Dispatch Process through a range of past Primary Dispatch Intervals

        Retrieves Solution Data from the Central Dispatch Process through a range of past Primary Dispatch Intervals

        :param primary_dispatch_interval_from: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00 (required)
        :type primary_dispatch_interval_from: str
        :param primary_dispatch_interval_to: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00 (required)
        :type primary_dispatch_interval_to: str
        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param categories: Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.
        :type categories: str
        :param dispatch_scenario: Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference
        :type dispatch_scenario: str
        :param accept_encoding:
        :type accept_encoding: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v1_dispatchsolution_dispatchdataoutcomes_serialize(
            primary_dispatch_interval_from=primary_dispatch_interval_from,
            primary_dispatch_interval_to=primary_dispatch_interval_to,
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            categories=categories,
            dispatch_scenario=dispatch_scenario,
            accept_encoding=accept_encoding,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDispatchDataOutcomes",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_api_v1_dispatchsolution_dispatchdataoutcomes_with_http_info(
        self,
        primary_dispatch_interval_from: Annotated[StrictStr, Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")],
        primary_dispatch_interval_to: Annotated[StrictStr, Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")],
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        categories: Annotated[Optional[StrictStr], Field(description="Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.")] = None,
        dispatch_scenario: Annotated[Optional[StrictStr], Field(description="Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference")] = None,
        accept_encoding: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SwaggerDispatchDataOutcomes]:
        """Retrieves Solution Data from the Central Dispatch Process through a range of past Primary Dispatch Intervals

        Retrieves Solution Data from the Central Dispatch Process through a range of past Primary Dispatch Intervals

        :param primary_dispatch_interval_from: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00 (required)
        :type primary_dispatch_interval_from: str
        :param primary_dispatch_interval_to: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00 (required)
        :type primary_dispatch_interval_to: str
        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param categories: Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.
        :type categories: str
        :param dispatch_scenario: Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference
        :type dispatch_scenario: str
        :param accept_encoding:
        :type accept_encoding: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v1_dispatchsolution_dispatchdataoutcomes_serialize(
            primary_dispatch_interval_from=primary_dispatch_interval_from,
            primary_dispatch_interval_to=primary_dispatch_interval_to,
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            categories=categories,
            dispatch_scenario=dispatch_scenario,
            accept_encoding=accept_encoding,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDispatchDataOutcomes",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_api_v1_dispatchsolution_dispatchdataoutcomes_without_preload_content(
        self,
        primary_dispatch_interval_from: Annotated[StrictStr, Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")],
        primary_dispatch_interval_to: Annotated[StrictStr, Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")],
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        categories: Annotated[Optional[StrictStr], Field(description="Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.")] = None,
        dispatch_scenario: Annotated[Optional[StrictStr], Field(description="Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference")] = None,
        accept_encoding: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieves Solution Data from the Central Dispatch Process through a range of past Primary Dispatch Intervals

        Retrieves Solution Data from the Central Dispatch Process through a range of past Primary Dispatch Intervals

        :param primary_dispatch_interval_from: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00 (required)
        :type primary_dispatch_interval_from: str
        :param primary_dispatch_interval_to: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00 (required)
        :type primary_dispatch_interval_to: str
        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param categories: Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.
        :type categories: str
        :param dispatch_scenario: Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference
        :type dispatch_scenario: str
        :param accept_encoding:
        :type accept_encoding: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v1_dispatchsolution_dispatchdataoutcomes_serialize(
            primary_dispatch_interval_from=primary_dispatch_interval_from,
            primary_dispatch_interval_to=primary_dispatch_interval_to,
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            categories=categories,
            dispatch_scenario=dispatch_scenario,
            accept_encoding=accept_encoding,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDispatchDataOutcomes",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_api_v1_dispatchsolution_dispatchdataoutcomes_serialize(
        self,
        primary_dispatch_interval_from,
        primary_dispatch_interval_to,
        x_initiating_participant_id,
        x_market,
        categories,
        dispatch_scenario,
        accept_encoding,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if primary_dispatch_interval_from is not None:
            
            _query_params.append(('primaryDispatchIntervalFrom', primary_dispatch_interval_from))
            
        if primary_dispatch_interval_to is not None:
            
            _query_params.append(('primaryDispatchIntervalTo', primary_dispatch_interval_to))
            
        if categories is not None:
            
            _query_params.append(('categories', categories))
            
        if dispatch_scenario is not None:
            
            _query_params.append(('dispatchScenario', dispatch_scenario))
            
        # process the header parameters
        if accept_encoding is not None:
            _header_params['accept-encoding'] = accept_encoding
        if x_initiating_participant_id is not None:
            _header_params['x-initiatingParticipantId'] = x_initiating_participant_id
        if x_market is not None:
            _header_params['x-market'] = x_market
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/plain', 
                'application/json', 
                'text/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/dispatchSolution/dispatchDataOutcomes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_api_v1_dispatchsolution_predispatchdata(
        self,
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        categories: Annotated[Optional[StrictStr], Field(description="Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.")] = None,
        dispatch_scenario: Annotated[Optional[StrictStr], Field(description="Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference")] = None,
        dispatch_interval_start_date: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        dispatch_interval_end_date: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        primary_dispatch_interval: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        accept_encoding: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SwaggerDispatchSolutionData:
        """Retrieves the Solution Data for Pre-Dispatch Run

        Retrieves the Solution Data for Pre-Dispatch Run

        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param categories: Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.
        :type categories: str
        :param dispatch_scenario: Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference
        :type dispatch_scenario: str
        :param dispatch_interval_start_date: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_start_date: str
        :param dispatch_interval_end_date: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_end_date: str
        :param primary_dispatch_interval: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type primary_dispatch_interval: str
        :param accept_encoding:
        :type accept_encoding: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v1_dispatchsolution_predispatchdata_serialize(
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            categories=categories,
            dispatch_scenario=dispatch_scenario,
            dispatch_interval_start_date=dispatch_interval_start_date,
            dispatch_interval_end_date=dispatch_interval_end_date,
            primary_dispatch_interval=primary_dispatch_interval,
            accept_encoding=accept_encoding,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDispatchSolutionData",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_api_v1_dispatchsolution_predispatchdata_with_http_info(
        self,
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        categories: Annotated[Optional[StrictStr], Field(description="Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.")] = None,
        dispatch_scenario: Annotated[Optional[StrictStr], Field(description="Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference")] = None,
        dispatch_interval_start_date: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        dispatch_interval_end_date: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        primary_dispatch_interval: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        accept_encoding: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SwaggerDispatchSolutionData]:
        """Retrieves the Solution Data for Pre-Dispatch Run

        Retrieves the Solution Data for Pre-Dispatch Run

        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param categories: Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.
        :type categories: str
        :param dispatch_scenario: Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference
        :type dispatch_scenario: str
        :param dispatch_interval_start_date: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_start_date: str
        :param dispatch_interval_end_date: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_end_date: str
        :param primary_dispatch_interval: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type primary_dispatch_interval: str
        :param accept_encoding:
        :type accept_encoding: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v1_dispatchsolution_predispatchdata_serialize(
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            categories=categories,
            dispatch_scenario=dispatch_scenario,
            dispatch_interval_start_date=dispatch_interval_start_date,
            dispatch_interval_end_date=dispatch_interval_end_date,
            primary_dispatch_interval=primary_dispatch_interval,
            accept_encoding=accept_encoding,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDispatchSolutionData",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_api_v1_dispatchsolution_predispatchdata_without_preload_content(
        self,
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        categories: Annotated[Optional[StrictStr], Field(description="Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.")] = None,
        dispatch_scenario: Annotated[Optional[StrictStr], Field(description="Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference")] = None,
        dispatch_interval_start_date: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        dispatch_interval_end_date: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        primary_dispatch_interval: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        accept_encoding: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieves the Solution Data for Pre-Dispatch Run

        Retrieves the Solution Data for Pre-Dispatch Run

        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param categories: Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.
        :type categories: str
        :param dispatch_scenario: Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference
        :type dispatch_scenario: str
        :param dispatch_interval_start_date: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_start_date: str
        :param dispatch_interval_end_date: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_end_date: str
        :param primary_dispatch_interval: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type primary_dispatch_interval: str
        :param accept_encoding:
        :type accept_encoding: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v1_dispatchsolution_predispatchdata_serialize(
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            categories=categories,
            dispatch_scenario=dispatch_scenario,
            dispatch_interval_start_date=dispatch_interval_start_date,
            dispatch_interval_end_date=dispatch_interval_end_date,
            primary_dispatch_interval=primary_dispatch_interval,
            accept_encoding=accept_encoding,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDispatchSolutionData",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_api_v1_dispatchsolution_predispatchdata_serialize(
        self,
        x_initiating_participant_id,
        x_market,
        categories,
        dispatch_scenario,
        dispatch_interval_start_date,
        dispatch_interval_end_date,
        primary_dispatch_interval,
        accept_encoding,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if categories is not None:
            
            _query_params.append(('categories', categories))
            
        if dispatch_scenario is not None:
            
            _query_params.append(('dispatchScenario', dispatch_scenario))
            
        if dispatch_interval_start_date is not None:
            
            _query_params.append(('dispatchIntervalStartDate', dispatch_interval_start_date))
            
        if dispatch_interval_end_date is not None:
            
            _query_params.append(('dispatchIntervalEndDate', dispatch_interval_end_date))
            
        if primary_dispatch_interval is not None:
            
            _query_params.append(('primaryDispatchInterval', primary_dispatch_interval))
            
        # process the header parameters
        if accept_encoding is not None:
            _header_params['accept-encoding'] = accept_encoding
        if x_initiating_participant_id is not None:
            _header_params['x-initiatingParticipantId'] = x_initiating_participant_id
        if x_market is not None:
            _header_params['x-market'] = x_market
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/plain', 
                'application/json', 
                'text/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/dispatchSolution/preDispatchData',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_api_v1_dispatchsolution_weekaheaddispatchdata(
        self,
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        categories: Annotated[Optional[StrictStr], Field(description="Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.")] = None,
        dispatch_scenario: Annotated[Optional[StrictStr], Field(description="Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference")] = None,
        dispatch_interval_start_date: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        dispatch_interval_end_date: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        primary_dispatch_interval: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        accept_encoding: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SwaggerDispatchSolutionData:
        """Retrieves the Solution Data for Week Ahead Dispatch Run

        Retrieves the Solution Data for Week Ahead Dispatch Run

        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param categories: Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.
        :type categories: str
        :param dispatch_scenario: Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference
        :type dispatch_scenario: str
        :param dispatch_interval_start_date: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_start_date: str
        :param dispatch_interval_end_date: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_end_date: str
        :param primary_dispatch_interval: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type primary_dispatch_interval: str
        :param accept_encoding:
        :type accept_encoding: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v1_dispatchsolution_weekaheaddispatchdata_serialize(
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            categories=categories,
            dispatch_scenario=dispatch_scenario,
            dispatch_interval_start_date=dispatch_interval_start_date,
            dispatch_interval_end_date=dispatch_interval_end_date,
            primary_dispatch_interval=primary_dispatch_interval,
            accept_encoding=accept_encoding,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDispatchSolutionData",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_api_v1_dispatchsolution_weekaheaddispatchdata_with_http_info(
        self,
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        categories: Annotated[Optional[StrictStr], Field(description="Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.")] = None,
        dispatch_scenario: Annotated[Optional[StrictStr], Field(description="Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference")] = None,
        dispatch_interval_start_date: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        dispatch_interval_end_date: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        primary_dispatch_interval: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        accept_encoding: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SwaggerDispatchSolutionData]:
        """Retrieves the Solution Data for Week Ahead Dispatch Run

        Retrieves the Solution Data for Week Ahead Dispatch Run

        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param categories: Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.
        :type categories: str
        :param dispatch_scenario: Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference
        :type dispatch_scenario: str
        :param dispatch_interval_start_date: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_start_date: str
        :param dispatch_interval_end_date: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_end_date: str
        :param primary_dispatch_interval: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type primary_dispatch_interval: str
        :param accept_encoding:
        :type accept_encoding: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v1_dispatchsolution_weekaheaddispatchdata_serialize(
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            categories=categories,
            dispatch_scenario=dispatch_scenario,
            dispatch_interval_start_date=dispatch_interval_start_date,
            dispatch_interval_end_date=dispatch_interval_end_date,
            primary_dispatch_interval=primary_dispatch_interval,
            accept_encoding=accept_encoding,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDispatchSolutionData",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_api_v1_dispatchsolution_weekaheaddispatchdata_without_preload_content(
        self,
        x_initiating_participant_id: Annotated[StrictStr, Field(description="The id of the Initiating Participant")],
        x_market: Annotated[StrictStr, Field(description="The id of the market")],
        categories: Annotated[Optional[StrictStr], Field(description="Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.")] = None,
        dispatch_scenario: Annotated[Optional[StrictStr], Field(description="Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference")] = None,
        dispatch_interval_start_date: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        dispatch_interval_end_date: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        primary_dispatch_interval: Annotated[Optional[StrictStr], Field(description="Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00")] = None,
        accept_encoding: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieves the Solution Data for Week Ahead Dispatch Run

        Retrieves the Solution Data for Week Ahead Dispatch Run

        :param x_initiating_participant_id: The id of the Initiating Participant (required)
        :type x_initiating_participant_id: str
        :param x_market: The id of the market (required)
        :type x_market: str
        :param categories: Possible values are Schedule,DispatchCaps,TrapeziumAdjustments,FacilityScheduleDetails,DefinedContingency,Constraints,InServiceQuantities,AvailableQuantities,MarketShortfalls,Prices,DispatchTotal,RocofControlRequirements,ContingencySolution,PriceSetting,FcessMarketClearingPriceCeilings.
        :type categories: str
        :param dispatch_scenario: Possible values are Reference,ForecastHigh, ForecastLow. Default value is Reference
        :type dispatch_scenario: str
        :param dispatch_interval_start_date: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_start_date: str
        :param dispatch_interval_end_date: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type dispatch_interval_end_date: str
        :param primary_dispatch_interval: Default date format: yyyy-MM-ddTHH:mm:ss+08:00. For request, the offset +08:00 is optional - api will by default treat incoming time as +08:00
        :type primary_dispatch_interval: str
        :param accept_encoding:
        :type accept_encoding: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v1_dispatchsolution_weekaheaddispatchdata_serialize(
            x_initiating_participant_id=x_initiating_participant_id,
            x_market=x_market,
            categories=categories,
            dispatch_scenario=dispatch_scenario,
            dispatch_interval_start_date=dispatch_interval_start_date,
            dispatch_interval_end_date=dispatch_interval_end_date,
            primary_dispatch_interval=primary_dispatch_interval,
            accept_encoding=accept_encoding,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SwaggerDispatchSolutionData",
            '400': "SwaggerErrorResponse",
            '401': "SwaggerErrorResponse",
            '403': "SwaggerErrorResponse",
            '404': "SwaggerErrorResponse",
            '405': "SwaggerErrorResponse",
            '413': "SwaggerErrorResponse",
            '422': "SwaggerErrorResponse",
            '429': "SwaggerErrorResponse",
            '500': "SwaggerErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_api_v1_dispatchsolution_weekaheaddispatchdata_serialize(
        self,
        x_initiating_participant_id,
        x_market,
        categories,
        dispatch_scenario,
        dispatch_interval_start_date,
        dispatch_interval_end_date,
        primary_dispatch_interval,
        accept_encoding,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if categories is not None:
            
            _query_params.append(('categories', categories))
            
        if dispatch_scenario is not None:
            
            _query_params.append(('dispatchScenario', dispatch_scenario))
            
        if dispatch_interval_start_date is not None:
            
            _query_params.append(('dispatchIntervalStartDate', dispatch_interval_start_date))
            
        if dispatch_interval_end_date is not None:
            
            _query_params.append(('dispatchIntervalEndDate', dispatch_interval_end_date))
            
        if primary_dispatch_interval is not None:
            
            _query_params.append(('primaryDispatchInterval', primary_dispatch_interval))
            
        # process the header parameters
        if accept_encoding is not None:
            _header_params['accept-encoding'] = accept_encoding
        if x_initiating_participant_id is not None:
            _header_params['x-initiatingParticipantId'] = x_initiating_participant_id
        if x_market is not None:
            _header_params['x-market'] = x_market
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/plain', 
                'application/json', 
                'text/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/dispatchSolution/weekAheadDispatchData',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


